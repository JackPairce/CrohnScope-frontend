/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ai/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Model Status
         * @description Get the current status of the AI model training process.
         *
         *     Returns:
         *         ModelStatusResponse: Status information including training state, progress, metrics, and timing.
         */
        get: operations["get_model_status_ai_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/train": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trigger Training
         * @description Manually trigger model training.
         *
         *     Returns:
         *         TrainingResponse: Status message and whether training was started.
         */
        post: operations["trigger_training_ai_train_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/generate-mask/{image_id}/{cell_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Mask
         * @description Generate a mask for a specific image and cell type using the AI model.
         *
         *     Args:
         *         image_id: ID of the image to generate the mask for
         *         cell_id: ID of the cell type to generate the mask for
         *
         *     Returns:
         *         MaskGenerationResponse: Status message indicating success or failure
         */
        post: operations["generate_mask_ai_generate_mask__image_id___cell_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/generate-masks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate All Masks
         * @description Generate masks for all images that don't have masks yet.
         *     This runs in the background as it may take some time.
         *
         *     Returns:
         *         MaskGenerationResponse: Status message indicating task has started
         */
        post: operations["generate_all_masks_ai_generate_masks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/check-training-conditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Conditions
         * @description Check if training should be triggered based on current conditions.
         */
        get: operations["check_conditions_ai_check_training_conditions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Cells
         * @description Get all cell types in the database.
         */
        get: operations["get_all_cells_cells__get"];
        put?: never;
        /**
         * Create Cell
         * @description Create a new cell type.
         */
        post: operations["create_cell_cells__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells/get/{image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Cells
         * @description Compatibility method for existing code - get all cells.
         */
        get: operations["get_cells_cells_get__image_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells/{cell_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Cell
         * @description Get a specific cell by ID.
         */
        get: operations["get_cell_cells__cell_id__get"];
        /**
         * Update Cell
         * @description Update an existing cell type.
         */
        put: operations["update_cell_cells__cell_id__put"];
        post?: never;
        /**
         * Delete Cell
         * @description Delete a cell type and its associated masks.
         */
        delete: operations["delete_cell_cells__cell_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells/save/{image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Cell
         * @description Legacy method for compatibility with existing code.
         */
        post: operations["add_cell_cells_save__image_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Status
         * @description Get the status of the image service.
         */
        get: operations["get_status_images_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/all/{page}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Images
         * @description Get a paginated list of images.
         *
         *     Args:
         *         page: Page number
         *         done: Filter by completion status (0 for incomplete, 1 for complete)
         */
        get: operations["get_images_images_all__page__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Image
         * @description Upload a new image.
         */
        post: operations["upload_image_images_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/delete/{image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Image
         * @description Delete an image and its associated files.
         */
        delete: operations["delete_image_images_delete__image_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/masks/get/{image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Masks
         * @description Get all masks for a specific image.
         *
         *     Args:
         *         image_id: ID of the image to get masks for
         */
        get: operations["get_masks_masks_get__image_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/masks/save/{image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save Masks
         * @description Save masks for an image.
         *
         *     Args:
         *         image_id: ID of the image to save masks for
         *         body: List of masks to save
         */
        post: operations["save_masks_masks_save__image_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/masks/done/{mask_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Mark Mask Done
         * @description Mark a mask as done.
         *
         *     Args:
         *         mask_id: ID of the mask to mark as done
         */
        put: operations["mark_mask_done_masks_done__mask_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/masks/annotate/{mask_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Mark Mask Annotated
         * @description Mark a mask as annotated.
         *
         *     Args:
         *         mask_id: ID of the mask to mark as annotated
         */
        put: operations["mark_mask_annotated_masks_annotate__mask_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/masks/alternate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Alternate Masks
         * @description Alternate (swap) two masks for an image.
         *
         *     Args:
         *         image_id: ID of the image
         *         mask1: First mask filename
         *         mask2: Second mask filename
         */
        post: operations["alternate_masks_masks_alternate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/masks/regions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Labeled Regions
         * @description Get a labeled version of a mask where each connected region has a unique ID.
         *
         *     Args:
         *         mask_data: Base64 encoded mask image
         *
         *     Returns:
         *         LabeledMaskResponse containing:
         *         - labeled_mask: Base64 encoded image where each region has a unique color
         *         - regions: List of region statistics including area, bounding box, and centroid
         */
        post: operations["get_labeled_regions_masks_regions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/masks/matrices/{image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mask Matrices
         * @description Get labeled regions matrix and health status matrices for an image.
         *
         *     Args:
         *         image_id: ID of the image
         *
         *     Returns:
         *         MaskMatricesResponse containing:
         *         - masks: List of MaskMatrix objects, each containing:
         *             - mask_id: ID of the mask
         *             - cell_id: ID of the cell type
         *             - labeledRegions: Matrix where each region has a unique ID
         *             - mask: Matrix where 0: background, 1: unhealthy, 2: healthy
         */
        get: operations["get_mask_matrices_masks_matrices__image_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/masks/region-health/{mask_id}/{region_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Region Health Status
         * @description Update the health status of a specific region in a mask.
         *
         *     Args:
         *         mask_id: ID of the mask
         *         region_id: ID of the region
         *         health_status: New health status (healthy/unhealthy)
         */
        put: operations["update_region_health_status_masks_region_health__mask_id___region_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitoring/system": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Info
         * @description Get static system information.
         */
        get: operations["get_system_info_monitoring_system_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitoring/data-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Data Usage
         * @description Get detailed information about data directory usage.
         */
        get: operations["get_data_usage_monitoring_data_usage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitoring/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Metrics
         * @description Get real-time system metrics (CPU, Memory, GPU).
         */
        get: operations["get_system_metrics_monitoring_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Root */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ApiCell */
        ApiCell: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /** ApiImage */
        ApiImage: {
            /** Id */
            id: number;
            /** Filename */
            filename: string;
            /** Src */
            src: string;
            /**
             * Is Done
             * @default false
             */
            is_done: boolean;
        };
        /**
         * ApiMask
         * @description API representation of a mask
         */
        ApiMask: {
            /** Id */
            id: number;
            /** Image Id */
            image_id: number;
            /** Mask Path */
            mask_path: string;
            /** Cell Id */
            cell_id?: number | null;
            /**
             * Is Mask Done
             * @default false
             */
            is_mask_done: boolean;
            /**
             * Is Annotation Done
             * @default false
             */
            is_annotation_done: boolean;
            /** Src */
            src: string;
            /** Labeledmask */
            labeledMask?: string | null;
            /** Regions */
            regions?: components["schemas"]["RegionInfo"][] | null;
        };
        /** Body_get_labeled_regions_masks_regions_post */
        Body_get_labeled_regions_masks_regions_post: {
            /** Mask Data */
            mask_data: string;
        };
        /**
         * CellType
         * @description Cell type response model
         */
        CellType: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * CellTypeBase
         * @description Base cell type model
         */
        CellTypeBase: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /**
         * CellTypeCreate
         * @description Cell type creation model
         */
        CellTypeCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /**
         * CellTypeCreateResponse
         * @description Response model for cell type creation
         */
        CellTypeCreateResponse: {
            /**
             * Message
             * @default Cell type created successfully
             */
            message: string;
            cell_type: components["schemas"]["CellType"];
        };
        /**
         * CellTypeDeleteResponse
         * @description Response model for cell type deletion
         */
        CellTypeDeleteResponse: {
            /**
             * Message
             * @default Cell type deleted successfully
             */
            message: string;
            /** Id */
            id: number;
        };
        /**
         * CellTypeResponse
         * @description Cell type operation response
         */
        CellTypeResponse: {
            /**
             * Message
             * @default Operation successful
             */
            message: string;
            /**
             * Status
             * @default success
             */
            status: string;
            cell_type?: components["schemas"]["CellType"] | null;
        };
        /**
         * CellTypeUpdateResponse
         * @description Response model for cell type update
         */
        CellTypeUpdateResponse: {
            /**
             * Message
             * @default Cell type updated successfully
             */
            message: string;
            cell_type: components["schemas"]["CellType"];
        };
        /** CpuInfo */
        CpuInfo: {
            /** Physical Cores */
            physical_cores: number;
            /** Total Cores */
            total_cores: number;
            /** Max Frequency */
            max_frequency: string;
            /** Current Frequency */
            current_frequency: string;
            /** Usage Per Core */
            usage_per_core: string[];
            /** Total Usage */
            total_usage: string;
            /**
             * Temperatures
             * @description CPU temperatures in Celsius
             */
            temperatures?: {
                [key: string]: number;
            } | null;
        };
        /** DataDirectoryInfo */
        DataDirectoryInfo: {
            /** Path */
            path: string;
            /** Total Size */
            total_size: string;
            /** Max Size */
            max_size: string;
            dataset: components["schemas"]["DatasetInfo"];
        };
        /** DataUsageBreakdown */
        DataUsageBreakdown: {
            dataset: components["schemas"]["DatasetBreakdown"];
            models: components["schemas"]["ModelInfo"];
        };
        /** DataUsageResponse */
        DataUsageResponse: {
            /** Total Usage */
            total_usage: string;
            /** Max Size */
            max_size: string;
            /** Percentage Used */
            percentage_used: string;
            breakdown: components["schemas"]["DataUsageBreakdown"];
        };
        /** DatasetBreakdown */
        DatasetBreakdown: {
            /** Total Size */
            total_size: string;
            images: components["schemas"]["DirectoryStats"];
            masks: components["schemas"]["DirectoryStats"];
        };
        /** DatasetInfo */
        DatasetInfo: {
            /** Images */
            images: number;
            /** Masks */
            masks: number;
        };
        /** DirectoryStats */
        DirectoryStats: {
            /** Count */
            count: number;
            /** Size */
            size: string;
        };
        /** DiskInfo */
        DiskInfo: {
            /** Total */
            total: string;
            /** Used */
            used: string;
            /** Free */
            free: string;
            /** Percentage */
            percentage: string;
        };
        /** GpuInfo */
        GpuInfo: {
            /** Gpu Count */
            gpu_count: number;
            /** Current Device */
            current_device: number;
            /** Device Name */
            device_name: string;
            /** Memory Allocated */
            memory_allocated: string;
            /** Memory Reserved */
            memory_reserved: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthStatusEnum
         * @description Health status enum for mask regions.
         *     Used both in the database and to match numpy array values:
         *     0: background (not stored in enum)
         *     1: unhealthy
         *     2: healthy
         * @enum {string}
         */
        HealthStatusEnum: "unhealthy" | "healthy";
        /**
         * ImageListResponse
         * @description Response model for paginated image list
         */
        ImageListResponse: {
            /** Images */
            images: components["schemas"]["ApiImage"][];
            /** Page */
            page: number;
            /** Total */
            total: number;
        };
        /**
         * ImageStatus
         * @description Image service status response
         */
        ImageStatus: {
            /** Status */
            status: string;
        };
        /**
         * LabeledMaskResponse
         * @description Response model for labeled mask data
         */
        LabeledMaskResponse: {
            /** Labeledmask */
            labeledMask: string;
            /** Regions */
            regions: components["schemas"]["RegionInfo"][];
        };
        /**
         * MaskAnnotationResponse
         * @description Response model for mask annotation operations
         */
        MaskAnnotationResponse: {
            /** Message */
            message: string;
        };
        /**
         * MaskGenerationResponse
         * @description Mask generation response
         */
        MaskGenerationResponse: {
            /** Message */
            message: string;
            /** Status */
            status: string;
        };
        /**
         * MaskMatricesResponse
         * @description Response model for multiple mask matrices
         */
        MaskMatricesResponse: {
            /** Masks */
            masks: components["schemas"]["MaskMatrix"][];
        };
        /**
         * MaskMatrix
         * @description Matrix representation of a mask
         */
        MaskMatrix: {
            /** Mask Id */
            mask_id: number;
            /** Cell Id */
            cell_id: number;
            /** Labeledregions */
            labeledRegions: number[][];
            /** Mask */
            mask: number[][];
        };
        /**
         * MaskUpdateResponse
         * @description Response model for mask update operations
         */
        MaskUpdateResponse: {
            /** Message */
            message: string;
        };
        /** MemoryInfo */
        MemoryInfo: {
            /** Total */
            total: string;
            /** Available */
            available: string;
            /** Used */
            used: string;
            /** Percentage */
            percentage: string;
        };
        /** ModelInfo */
        ModelInfo: {
            /** Size */
            size: string;
            /** Files */
            files: string[];
        };
        /**
         * ModelStatusResponse
         * @description AI model status response
         */
        ModelStatusResponse: {
            /** Status */
            status: string;
            details: components["schemas"]["TrainingDetails"];
            timing: components["schemas"]["TrainingTiming"];
            next_training: components["schemas"]["NextTraining"];
        };
        /**
         * NextTraining
         * @description Next training information
         */
        NextTraining: {
            /** Images Needed */
            images_needed: number;
            /** Image Count */
            image_count: number;
            /** Last Training At */
            last_training_at: number;
            /** Mask Modifications Since Last */
            mask_modifications_since_last: number;
        };
        /**
         * RegionInfo
         * @description Model for region information in a labeled mask.
         */
        RegionInfo: {
            /** Id */
            id: number;
            /** Area */
            area: number;
            /** Boundingbox */
            boundingBox: {
                [key: string]: number;
            };
            /** Centroid */
            centroid: {
                [key: string]: number;
            };
        };
        /**
         * SaveMaskResponse
         * @description Model for mask saving response.
         */
        SaveMaskResponse: {
            /** Id */
            id: number;
            /** Cell Id */
            cell_id: number;
            /** Src */
            src: string;
        };
        /** StorageInfo */
        StorageInfo: {
            data_directory: components["schemas"]["DataDirectoryInfo"];
        };
        /** SystemInfo */
        SystemInfo: {
            /** System */
            system: string;
            /** Node Name */
            node_name: string;
            /** Release */
            release: string;
            /** Version */
            version: string;
            /** Machine */
            machine: string;
            /** Processor */
            processor: string;
            /** Uptime */
            uptime: string;
        };
        /** SystemMetrics */
        SystemMetrics: {
            /** Timestamp */
            timestamp: string;
            cpu: components["schemas"]["CpuInfo"];
            memory: components["schemas"]["MemoryInfo"];
            gpu: components["schemas"]["GpuInfo"] | null;
        };
        /** SystemResponse */
        SystemResponse: {
            /** Timestamp */
            timestamp: string;
            system: components["schemas"]["SystemInfo"];
            storage: components["schemas"]["StorageInfo"];
            disk: components["schemas"]["DiskInfo"];
        };
        /**
         * TrainingDetails
         * @description Training details response model
         */
        TrainingDetails: {
            /** Is Preprocessing */
            is_preprocessing: boolean;
            /** Is Training */
            is_training: boolean;
            /** Current Epoch */
            current_epoch: number;
            /** Total Epochs */
            total_epochs: number;
            /** Current Loss */
            current_loss: number;
            /** Best Loss */
            best_loss: number | null;
            /** Progress Percent */
            progress_percent: number | null;
            /** Stable Epochs */
            stable_epochs: number;
        };
        /**
         * TrainingResponse
         * @description Training trigger response
         */
        TrainingResponse: {
            /** Message */
            message: string;
            /** Status */
            status: string;
        };
        /**
         * TrainingTiming
         * @description Training timing information
         */
        TrainingTiming: {
            /** Started At */
            started_at: string | null;
            /** Elapsed */
            elapsed: string;
            /** Completed At */
            completed_at: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_model_status_ai_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelStatusResponse"];
                };
            };
        };
    };
    trigger_training_ai_train_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrainingResponse"];
                };
            };
        };
    };
    generate_mask_ai_generate_mask__image_id___cell_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                image_id: number;
                cell_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaskGenerationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_all_masks_ai_generate_masks_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaskGenerationResponse"];
                };
            };
        };
    };
    check_conditions_ai_check_training_conditions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrainingResponse"];
                };
            };
        };
    };
    get_all_cells_cells__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CellType"][];
                };
            };
        };
    };
    create_cell_cells__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CellTypeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CellTypeCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_cells_cells_get__image_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiCell"][];
                };
            };
        };
    };
    get_cell_cells__cell_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cell_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CellTypeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_cell_cells__cell_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cell_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CellTypeBase"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CellTypeUpdateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_cell_cells__cell_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cell_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CellTypeDeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_cell_cells_save__image_id__post: {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CellTypeCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_status_images_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageStatus"];
                };
            };
        };
    };
    get_images_images_all__page__get: {
        parameters: {
            query?: {
                done?: ("0" | "1") | null;
            };
            header?: never;
            path: {
                page: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_image_images_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiImage"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiImage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_image_images_delete__image_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                image_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_masks_masks_get__image_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                image_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiMask"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    save_masks_masks_save__image_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                image_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SaveMaskResponse"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    mark_mask_done_masks_done__mask_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mask_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaskUpdateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    mark_mask_annotated_masks_annotate__mask_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mask_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaskAnnotationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    alternate_masks_masks_alternate_post: {
        parameters: {
            query: {
                image_id: number;
                mask1: string;
                mask2: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_labeled_regions_masks_regions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_get_labeled_regions_masks_regions_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabeledMaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mask_matrices_masks_matrices__image_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                image_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaskMatricesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_region_health_status_masks_region_health__mask_id___region_id__put: {
        parameters: {
            query: {
                health_status: components["schemas"]["HealthStatusEnum"];
            };
            header?: never;
            path: {
                mask_id: number;
                region_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_system_info_monitoring_system_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemResponse"];
                };
            };
        };
    };
    get_data_usage_monitoring_data_usage_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataUsageResponse"];
                };
            };
        };
    };
    get_system_metrics_monitoring_metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemMetrics"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
