// Generated by Copilot
"use client";

import Image from "next/image";
import Link from "next/link";
import { usePathname } from "next/navigation";
import ThemeToggle from "../ThemeToggle";
import "./styles.scss";

interface NavLink {
  name: string;
  href: string;
  icon: string;
  badge?: number;
}

const navSections = [
  {
    title: "Overview",
    links: [
      { name: "Dashboard", href: "/dashboard", icon: "/svgs/home.svg" },
      { name: "Analytics", href: "/analytics", icon: "/svgs/chart.svg" },
    ],
  },
  {
    title: "Medical",
    links: [
      { name: "Patients", href: "/patients", icon: "/svgs/file.svg", badge: 5 },
      { name: "Diagnoses", href: "/diagnosis", icon: "/svgs/book.svg" },
    ],
  },
  {
    title: "Data Processing",
    links: [
      {
        name: "Image Library",
        href: "/data/images",
        icon: "/svgs/file.svg",
      },
      {
        name: "Segmentation",
        href: "/data/segmentation",
        icon: "/svgs/brush.svg",
      },
      {
        name: "Cell Classification",
        href: "/data/labeling",
        icon: "/svgs/cell-classification.svg",
      },
      { name: "AI Model", href: "/data/model", icon: "/svgs/model.svg" },
    ],
  },
];

export default function Layout({ children }: { children: React.ReactNode }) {
  const pathname = usePathname();
  const isDataRoute = pathname.startsWith("/data/");

  const isActive = (href: string) => {
    if (href === "/") return pathname === href;
    return pathname.startsWith(href);
  };

  return (
    <div className="layout">
      {/* Sidebar */}
      <aside className={`sidebar ${isDataRoute ? "collapsed" : ""}`}>
        <div className="logo">
          <Image src="/svgs/microscope.svg" alt="Logo" width={32} height={32} />
          <span>CrohnScope</span>
        </div>
        <nav className="nav">
          {navSections.map((section) => (
            <div key={section.title} className="nav-section">
              <h3 className="nav-section-title">{section.title}</h3>
              <div className="nav-links">
                {section.links.map((link) => (
                  <Link
                    key={link.href}
                    href={link.href}
                    className={`nav-link ${
                      isActive(link.href) ? "active" : ""
                    }`}
                  >
                    <Image
                      src={link.icon}
                      alt={link.name}
                      width={20}
                      height={20}
                      className="nav-link-icon svg-icon"
                    />
                    <span className="nav-link-text">{link.name}</span>
                    {link.badge && (
                      <span className="nav-link-badge">{link.badge}</span>
                    )}
                  </Link>
                ))}
              </div>
            </div>
          ))}
        </nav>
      </aside>

      {/* Header */}
      <header className="header">
        <div className="flex items-center gap-4">
          <button className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full">
            <svg
              className="w-6 h-6 text-gray-500"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            </svg>
          </button>
          <div className="header-title">
            <h1 className="text-xl font-semibold">
              {navSections
                .map((section) =>
                  section.links.find((link) => isActive(link.href))
                )
                .filter(Boolean)[0]?.name || "Dashboard"}
            </h1>
            {isDataRoute && (
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Data Processing Center
              </p>
            )}
          </div>
        </div>

        <div className="flex items-center gap-4">
          {/* Theme Toggle */}
          <ThemeToggle />

          {/* Notifications */}
          <button className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full relative">
            <svg
              className="w-6 h-6 text-gray-500"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"
              />
            </svg>
            <span className="absolute top-1.5 right-1.5 h-2 w-2 rounded-full bg-red-500"></span>
          </button>

          {/* User Menu */}
          <button className="flex items-center gap-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full">
            <div className="w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 overflow-hidden">
              <Image
                src="https://i.pravatar.cc/32?img=60"
                alt="User avatar"
                width={32}
                height={32}
                className="object-cover"
              />
            </div>
          </button>
        </div>
      </header>

      {/* Main Content */}
      <main>{children}</main>

      {/* Early Access Footer - Generated by Copilot */}
      <footer className="early-access-footer">
        <div className="early-access-badge">Early Access</div>
        <span>CrohnScope v0.9.0 - This is a pre-release version, May 2025</span>
      </footer>
    </div>
  );
}
