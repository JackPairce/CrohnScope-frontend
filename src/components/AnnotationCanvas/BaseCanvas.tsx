// Generated by Copilot
import {
  Dispatch,
  MutableRefObject,
  ReactNode,
  SetStateAction,
  useEffect,
  useRef,
} from "react";
import ConfirmDialog from "../ConfirmDialog";
import Loader from "../loader";
import { ApiImage } from "./api";
import RenderTabNavigation from "./TabNavigation";
import { Mode, SaveSatues, Tab } from "./types";

interface BaseCanvasProps {
  image: ApiImage;
  state: {
    tabs: Tab[];
    selectedTab: number;
    mode: Mode;
    canvasSaveStatus: SaveSatues;
    imgDim: { width: number; height: number } | null;
    isLoading: boolean;
    showSaveDialog: boolean;
  };
  refs: {
    overlayRef: MutableRefObject<HTMLCanvasElement>;
  };
  actions: {
    setTabs: Dispatch<SetStateAction<Tab[]>>;
    setSelectedTab: (index: number) => void;
    setIsLoading: Dispatch<SetStateAction<boolean>>;
    setShowSaveDialog: Dispatch<SetStateAction<boolean>>;
    resetStates: (loadPendingImage?: boolean, saveMade?: boolean) => void;
  };
  toolbar: ReactNode; // Made optional
  children: ReactNode;
}

export default function BaseCanvas({
  image,
  state,
  refs,
  actions,
  toolbar,
  children,
}: BaseCanvasProps) {
  if (state.isLoading || !state.imgDim) {
    return <Loader message="Loading canvas data..." />;
  }

  if (state.tabs.length === 0 || state.selectedTab === -1) {
    return null;
  }

  return (
    <>
      <RenderTabNavigation
        tabs={state.tabs}
        selectedTab={state.selectedTab}
        setSelectedTab={actions.setSelectedTab}
        setTabs={actions.setTabs}
        overlayRef={refs.overlayRef}
        isMarkingAllDone={state.canvasSaveStatus.isMarkingAllDone}
      />
      {toolbar}
      <div className="canvas-container">
        <div className="image-container">
          <img src={image.src} alt={image.filename} />
          {children}
        </div>
      </div>
      {state.showSaveDialog && (
        <ConfirmDialog
          isOpen={state.showSaveDialog}
          title="Save changes"
          message="Do you want to save the changes before continuing?"
          onConfirm={() => {
            // On confirm, we want to save and then load the pending image
            actions.setShowSaveDialog(false);
            // Save logic would go here
            // After saving, proceed with image change
            actions.resetStates(true, true); // true for loadPendingImage, true for saveMade
          }}
          onCancel={() => {
            // On cancel, we just close the dialog and discard changes
            actions.setShowSaveDialog(false);
            actions.resetStates(false, false); // false for don't loadPendingImage, false for saveMade
          }}
        />
      )}
    </>
  );
}
