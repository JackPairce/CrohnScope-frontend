// Generated by Copilot
import { ApiImage } from "@/lib/api";
import {
  Dispatch,
  ReactNode,
  RefObject,
  SetStateAction,
  useEffect,
  useRef,
  useState,
} from "react";
import Loader from "../loader";
import TabNavigation from "./TabNavigation";
import { SaveSatues, Tab } from "./types";

interface BaseCanvasProps {
  image: ApiImage;
  state: {
    tabs: Tab[];
    selectedTab: number;
    canvasSaveStatus: SaveSatues;
    imgDim: { width: number; height: number } | null;
    isLoading: boolean;
  };
  refs: {
    overlayRef: RefObject<HTMLCanvasElement>;
  };
  actions: {
    setTabs: Dispatch<SetStateAction<Tab[]>>;
    setSelectedTab: (index: number) => void;
    setIsLoading: Dispatch<SetStateAction<boolean>>;
  };
  toolbar: ReactNode; // Made optional
  children: ReactNode;
}

export default function BaseCanvas({
  image,
  state,
  refs,
  actions,
  toolbar,
  children,
}: BaseCanvasProps) {
  const ContainerRef = useRef<HTMLDivElement>(null);
  const imgRef = useRef<HTMLImageElement>(null);

  const [_, setTriggerResize] = useState<boolean>(false);

  const resizeObserver = new ResizeObserver(() => {
    setTriggerResize((prev) => !prev);
  });

  useEffect(() => {
    if (ContainerRef.current && imgRef.current) {
      const OriginalimgWidth = imgRef.current.naturalWidth;
      const OriginalimgHeight = imgRef.current.naturalHeight;
      const imgWidth = imgRef.current.clientWidth;
      const imgHeight = imgRef.current.clientHeight;

      const imgRatio = imgWidth / imgHeight;
      const OriginalimgRatio = OriginalimgWidth / OriginalimgHeight;
      if (imgRatio > OriginalimgRatio) {
        ContainerRef.current.style.width = `${imgHeight * OriginalimgRatio}px`;
      } else {
        ContainerRef.current.style.height = `${imgWidth / OriginalimgRatio}px`;
      }
    }
  }, [image]);

  useEffect(() => {
    if (ContainerRef.current) {
      resizeObserver.observe(ContainerRef.current);
    }
    return () => {
      if (ContainerRef.current) {
        resizeObserver.unobserve(ContainerRef.current);
      }
    };
  }, [ContainerRef]);

  if (state.isLoading || !state.imgDim) {
    return <Loader message="Loading canvas data..." />;
  }

  if (state.tabs.length === 0 || state.selectedTab === -1) {
    return null;
  }

  return (
    <>
      <TabNavigation
        tabs={state.tabs}
        selectedTab={state.selectedTab}
        setSelectedTab={actions.setSelectedTab}
        setTabs={actions.setTabs}
        overlayRef={refs.overlayRef}
        isMarkingAllDone={state.canvasSaveStatus.isMarkingAllDone}
      />
      {toolbar}
      <div className="canvas-container">
        <div className="image-container" ref={ContainerRef}>
          <img src={image.src} alt={image.filename} ref={imgRef} />
          {children}
        </div>
      </div>
    </>
  );
}
