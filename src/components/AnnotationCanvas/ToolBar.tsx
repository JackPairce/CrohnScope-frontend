// Generated by Copilot
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { SaveSatues, Tab } from "./types";

interface ToolBarProps {
  saveMasks: () => void;
  saveStatus: SaveSatues;
  isAllDone: boolean;
  MarkAllDone: () => void;
  children: React.ReactNode;
  markCurrentMask?: () => void;
  saveAll?: () => void;
  saveAndMark?: () => void;
  state: {
    selectedTab: number;
    tabs: Tab[];
  };

  generateWithAI: () => Promise<boolean>;
  setTabs: React.Dispatch<React.SetStateAction<Tab[]>>;
}

export default function ToolBar({
  saveMasks,
  saveStatus,
  isAllDone,
  MarkAllDone,
  children,
  markCurrentMask,
  saveAll,
  saveAndMark,
  state,
  generateWithAI,
  setTabs,
}: ToolBarProps) {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const [isGenerated, setIsGenerated] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [tmpMask, setTmpMask] = useState<HTMLImageElement[]>([]);

  // Handle closing dropdown when clicking outside
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsDropdownOpen(false);
      }
    }

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Determine primary action based on current state
  const getPrimaryAction = () => {
    if (saveStatus.isModified) {
      return {
        label: saveStatus.isSaving ? "Saving..." : "Save",
        icon: "/svgs/save.svg",
        action: saveMasks,
        className: "save",
      };
    } else if (!isAllDone) {
      // Determine the label based on available actions
      let actionLabel;
      let action;

      if (saveStatus.isMarkingAllDone) {
        actionLabel = "Marking...";
        action = markCurrentMask || MarkAllDone;
      } else if (markCurrentMask) {
        // If we have markCurrentMask available, check if current is done
        const currentTab = state?.tabs?.[state?.selectedTab];
        const otherUnmarkedMasks = state?.tabs.some(
          (tab, idx) => idx !== state.selectedTab && !tab.isDone
        );

        // Show "Mark All" if current mask is done and there are other unmarked masks
        if (currentTab?.isDone && otherUnmarkedMasks) {
          actionLabel = "Mark All";
          action = MarkAllDone;
        } else {
          actionLabel = "Mark Current";
          action = markCurrentMask;
        }
      } else {
        actionLabel = "Mark All Done";
        action = MarkAllDone;
      }

      return {
        label: actionLabel,
        icon: "/svgs/checkmark.svg",
        action: action,
        className: "done",
      };
    }
    return null;
  };

  const handleGenerate = async () => {
    if (isGenerating) return; // Prevent multiple clicks
    setIsGenerating(true);
    try {
      setTmpMask(state.tabs.map((tab) => tab.mask));
      const success = await generateWithAI();
      if (success) setIsGenerated(true);
    } catch (error) {
      console.error("Error generating with AI:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  const primaryAction = getPrimaryAction();

  return (
    <nav className="tools">
      {children}

      <div className="ai-generation-container">
        {isGenerated ? (
          <div className="ai-result-panel">
            <div className="ai-result-header">
              <span className="ai-result-title">
                <Image
                  src="/svgs/model.svg"
                  alt="AI"
                  width={18}
                  height={18}
                  className="svg-icon-colored"
                />
                AI Generation Complete
              </span>
              <div className="ai-result-badge success">Ready for Review</div>
            </div>

            <div className="ai-action-buttons">
              <button
                className="ai-button ai-keep-all"
                onClick={() => {
                  setIsGenerated(false);
                  setTmpMask([]);
                }}
              >
                <Image
                  src="/svgs/checkmark.svg"
                  alt="Keep All"
                  width={16}
                  height={16}
                  className="svg-icon"
                />
                Keep All
              </button>

              <button
                className="ai-button ai-discard-current"
                onClick={() => {
                  setTabs((prev) =>
                    prev.map((tab, index) => ({
                      ...tab,
                      mask:
                        index === state.selectedTab
                          ? tmpMask[state.selectedTab] || tab.mask
                          : tab.mask,
                    }))
                  );
                }}
              >
                <Image
                  src="/svgs/clear-mask.svg"
                  alt="Discard Current"
                  width={16}
                  height={16}
                  className="svg-icon"
                />
                Discard Current
              </button>

              <button
                className="ai-button ai-discard-all"
                onClick={() => {
                  setIsGenerated(false);
                  setTabs((prev) =>
                    prev.map((tab, index) => ({
                      ...tab,
                      mask: tmpMask[index] || tab.mask,
                    }))
                  );
                  setTmpMask([]);
                }}
              >
                <Image
                  src="/svgs/delete.svg"
                  alt="Discard All"
                  width={16}
                  height={16}
                  className="svg-icon"
                />
                Discard All
              </button>
            </div>
          </div>
        ) : !isGenerating ? (
          <button className="ai-generate-button" onClick={handleGenerate}>
            <Image
              src="/svgs/model.svg"
              alt="AI"
              width={18}
              height={18}
              className="svg-icon-colored"
            />
            <span>Generate with AI</span>
          </button>
        ) : (
          <div className="ai-generating">
            <div className="ai-loader">
              <div className="ai-loader-spinner"></div>
            </div>
            <div className="ai-generating-text">
              <span className="ai-generating-title">Generating Masks</span>
              <span className="ai-generating-subtitle">
                This may take a moment...
              </span>
            </div>
          </div>
        )}
      </div>

      <div className="action-buttons-container" ref={dropdownRef}>
        {primaryAction && (
          <button
            className={`primary-action-btn ${primaryAction.className}`}
            onClick={primaryAction.action}
            disabled={saveStatus.isSaving || saveStatus.isMarkingAllDone}
          >
            <Image
              src={primaryAction.icon}
              alt={primaryAction.label}
              width={20}
              height={20}
              className="svg-icon"
            />{" "}
            <span>{primaryAction.label}</span>
            <div
              className="dropdown-toggle"
              onClick={(e) => {
                e.stopPropagation();
                setIsDropdownOpen(!isDropdownOpen);
              }}
            >
              <Image
                src="/svgs/chevron.svg"
                alt="More options"
                width={14}
                height={14}
                className={`chevron-icon ${isDropdownOpen ? "rotate" : ""}`}
              />
            </div>
          </button>
        )}
        {isDropdownOpen && (
          <div className="actions-dropdown">
            {/* Show Mark Current Mask if it's available and either:
                1. The primary action is not already Mark Current, or
                2. We have modifications (since Save would be primary then) */}
            {markCurrentMask &&
              (primaryAction?.label !== "Mark Current" ||
                saveStatus.isModified) && (
                <button
                  onClick={() => {
                    markCurrentMask();
                    setIsDropdownOpen(false);
                  }}
                  className="dropdown-item"
                  disabled={saveStatus.isMarkingAllDone}
                >
                  <Image
                    src="/svgs/checkmark.svg"
                    alt="Mark Current"
                    width={18}
                    height={18}
                    className="svg-icon"
                  />
                  <span>Mark Current Mask</span>
                </button>
              )}

            {/* Show Mark All Done if not already done and not the primary action */}
            {!isAllDone && primaryAction?.label !== "Mark All Done" && (
              <button
                onClick={() => {
                  MarkAllDone();
                  setIsDropdownOpen(false);
                }}
                className="dropdown-item"
                disabled={saveStatus.isMarkingAllDone}
              >
                <Image
                  src="/svgs/checkmark.svg"
                  alt="Mark All"
                  width={18}
                  height={18}
                  className="svg-icon"
                />
                <span>Mark All Done</span>
              </button>
            )}

            {/* Always show Save if we have modifications and it's not the primary action */}
            {saveStatus.isModified && primaryAction?.className !== "save" && (
              <button
                onClick={() => {
                  saveMasks();
                  setIsDropdownOpen(false);
                }}
                className="dropdown-item"
                disabled={saveStatus.isSaving}
              >
                <Image
                  src="/svgs/save.svg"
                  alt="Save"
                  width={18}
                  height={18}
                  className="svg-icon"
                />
                <span>Save Current</span>
              </button>
            )}

            {/* Show Save All if available and there are modifications */}
            {saveAll && saveStatus.isModified && (
              <button
                onClick={() => {
                  saveAll();
                  setIsDropdownOpen(false);
                }}
                className="dropdown-item"
                disabled={saveStatus.isSaving}
              >
                <Image
                  src="/svgs/save.svg"
                  alt="Save All"
                  width={18}
                  height={18}
                  className="svg-icon"
                />
                <span>Save All Masks</span>
              </button>
            )}

            {/* Always show Save and Mark option if available */}
            {saveAndMark && (
              <button
                onClick={() => {
                  saveAndMark();
                  setIsDropdownOpen(false);
                }}
                className="dropdown-item"
                disabled={saveStatus.isSaving || saveStatus.isMarkingAllDone}
              >
                <Image
                  src="/svgs/save.svg"
                  alt="Save and Mark"
                  width={18}
                  height={18}
                  className="svg-icon"
                />
                <span>Save and Mark</span>
              </button>
            )}
          </div>
        )}
      </div>
    </nav>
  );
}
