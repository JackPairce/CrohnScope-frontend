import { components } from "@/api";
import axios from "axios";

// TODO Replace with your actual API base URL
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL;

// Generated by Copilot
// Types using directly from OpenAPI schema
export type ApiImage = components["schemas"]["ApiImage"];
export type ApiMask = components["schemas"]["ApiMask"];
export type MaskMatricesResponse =
  components["schemas"]["MaskMatricesResponse"];
export type HealthStatusEnum = components["schemas"]["HealthStatusEnum"];

export const getImages = async (
  page: number,
  done?: boolean
): Promise<components["schemas"]["ImageListResponse"]> => {
  const response = await axios.get(
    `${API_BASE_URL}/images/all/${page}${
      done !== undefined ? `?done=${done ? 1 : 0}` : ""
    }`
  );
  return response.data;
};

// Upload an image
export const uploadImage = async (
  image: components["schemas"]["ApiImage"]
): Promise<components["schemas"]["ApiImage"]> => {
  const response = await axios.post(`${API_BASE_URL}/images/upload`, image);
  return response.data;
};

// Delete an image
export const deleteImage = async (
  imageId: number
): Promise<{ message: string }> => {
  const response = await axios.delete(
    `${API_BASE_URL}/images/delete/${imageId}`
  );
  return response.data;
};

export const getCells = async (
  imageId: number
): Promise<components["schemas"]["ApiCell"][]> => {
  const response = await axios.get(`${API_BASE_URL}/cells/get/${imageId}`);
  return response.data;
};

// Get an image and create a mask
export const getMask = async (
  imageId: number
): Promise<components["schemas"]["ApiMask"][]> => {
  const response = await axios.get(`${API_BASE_URL}/masks/get/${imageId}`);
  return response.data;
};

export const uploadMasks = async (
  imageId: number,
  masks: components["schemas"]["SaveMaskResponse"][]
): Promise<{ message: string }> => {
  const response = await axios.post(
    `${API_BASE_URL}/masks/save/${imageId}`,
    masks
  );
  return response.data;
};

export const SetMaskDone = async (
  maskId: number
): Promise<{ message: string }> => {
  const response = await axios.put(`${API_BASE_URL}/masks/done/${maskId}`);
  return response.data;
};

// Alternate mask names
export const alternateMasks = async (
  imageId: number,
  mask1: string,
  mask2: string
): Promise<{ message: string }> => {
  const response = await axios.post(`${API_BASE_URL}/masks/alternate`, {
    imageId,
    mask1,
    mask2,
  });
  return response.data;
};

export async function getMaskMatrices(
  imageId: number
): Promise<MaskMatricesResponse> {
  try {
    const response = await axios.get(
      `${API_BASE_URL}/masks/matrices/${imageId}`
    );
    return response.data;
  } catch (error) {
    console.error("Error fetching mask matrices:", error);
    throw new Error("Failed to get mask matrices");
  }
}

// Generated by Copilot
export async function updateRegionHealth(
  maskId: number,
  regionId: number,
  isHealthy: boolean
): Promise<{ message: string }> {
  try {
    const healthStatus: HealthStatusEnum = isHealthy ? "healthy" : "unhealthy";
    const response = await axios.put(
      `${API_BASE_URL}/masks/region-health/${maskId}/${regionId}`,
      null,
      {
        params: { health_status: healthStatus },
      }
    );
    return response.data;
  } catch (error) {
    console.error("Error updating region health:", error);
    throw new Error("Failed to update region health");
  }
}
