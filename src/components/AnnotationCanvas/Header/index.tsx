// Generated by Copilot
"use client";
import ThemeToggle from "@/components/ThemeToggle";
import Image from "next/image";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useEffect, useRef, useState } from "react";
import "./styles.css";

interface HeaderProps {
  title: string;
  onNext?: () => void;
  onPrevious?: () => void;
  showPagination?: boolean;
}

// Data processing sections for the navigation tabs
// Navigation sections - Generated by Copilot
// Generated by Copilot
const dataSections = [
  {
    name: "Management",
    path: "/data/management",
    icon: "/svgs/dataset.svg",
    class: "svg-icon",
  },
  {
    name: "Segmentation",
    path: "/data/segmentation",
    icon: "/svgs/brush.svg",
    class: "svg-icon",
  },
  {
    name: "Labeling",
    path: "/data/labeling",
    icon: "/svgs/checkmark.svg",
    class: "svg-icon",
  },
  {
    name: "Diagnostics",
    path: "/data/diagnostics",
    icon: "/svgs/chart.svg",
    class: "svg-icon",
  },
];

const Header = ({
  title,
  onNext,
  onPrevious,
  showPagination = false,
}: HeaderProps) => {
  const [isProfileOpen, setIsProfileOpen] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const pathname = usePathname();
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Update time every minute
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);

    // Handle clicks outside of the dropdown
    function handleClickOutside(event: MouseEvent) {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsProfileOpen(false);
      }
    }

    document.addEventListener("mousedown", handleClickOutside);

    return () => {
      clearInterval(timer);
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Format date as May 20, 2025 | 10:45 AM
  const formattedDate = currentTime.toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  });

  const formattedTime = currentTime.toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    hour12: true,
  });

  return (
    <header className="flex items-center justify-between p-4 border-b shadow-sm">
      <div className="flex items-center gap-4">
        <div className="flex items-center">
          <Link
            href="/"
            className="flex items-center gap-1 px-2 py-1 text-sm hover:bg-gray-100 rounded text-gray-600 transition-colors"
            title="Home"
          >
            <Image
              src="/svgs/home.svg"
              alt="Home"
              width={16}
              height={16}
              className="svg-icon"
            />
          </Link>
          <span className="text-gray-400 mx-1">/</span>
          <Link
            href="/data"
            className="flex items-center gap-2 px-2 py-1 text-sm hover:bg-gray-100 rounded transition-colors"
          >
            <span>Data Hub</span>
          </Link>

          {pathname !== "/data" && pathname.startsWith("/data/") && (
            <>
              <span className="text-gray-400 mx-1">/</span>
              <span className="text-indigo-600 font-medium">{title}</span>
            </>
          )}
        </div>

        {/* Title only visible when not shown in breadcrumb */}
        {(!pathname.startsWith("/data/") || pathname === "/data") && (
          <h1 className="text-xl font-semibold ml-4">{title}</h1>
        )}

        {showPagination && (
          <div className="flex items-center gap-2 ml-4">
            <button
              onClick={onPrevious}
              disabled={!onPrevious}
              className={`p-2 rounded-full ${
                onPrevious
                  ? "hover:bg-gray-100"
                  : "opacity-50 cursor-not-allowed"
              }`}
              title="Previous"
            >
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                className="svg-icon"
              >
                <path
                  d="M15 18L9 12L15 6"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </button>
            <button
              onClick={onNext}
              disabled={!onNext}
              className={`p-2 rounded-full ${
                onNext ? "hover:bg-gray-100" : "opacity-50 cursor-not-allowed"
              }`}
              title="Next"
            >
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                className="svg-icon"
              >
                <path
                  d="M9 6L15 12L9 18"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </button>
          </div>
        )}
      </div>

      <div className="flex items-center gap-6">
        {/* Navigation tabs for data processing sections */}
        <nav className="hidden md:flex items-center gap-1">
          {dataSections.map((section) => {
            const isActive = pathname === section.path;
            return (
              <Link
                key={section.path}
                href={section.path}
                className={`nav-link flex items-center gap-1.5 px-3 py-2 text-sm rounded-md transition-colors relative ${
                  isActive
                    ? "nav-link-active bg-indigo-50 text-indigo-700 font-medium"
                    : ""
                }`}
              >
                <Image
                  src={section.icon}
                  alt={section.name}
                  width={16}
                  height={16}
                  className={section.class}
                  style={{
                    filter: isActive ? "invert(0)" : "",
                  }}
                />
                <span>{section.name}</span>
                <div className="nav-link-indicator"></div>
              </Link>
            );
          })}
        </nav>

        {/* Date and time display */}
        <div className="hidden lg:flex flex-col items-end text-xs text-gray-500">
          <span className="font-medium">{formattedDate}</span>
          <span>{formattedTime}</span>
        </div>

        {/* Theme Toggle */}
        <ThemeToggle />

        {/* User profile */}
        <div className="relative">
          <button
            onClick={() => setIsProfileOpen(!isProfileOpen)}
            className="flex items-center gap-2 p-2 rounded-full hover:bg-gray-100"
          >
            <div className="w-8 h-8 rounded-full bg-indigo-600 flex items-center justify-center text-white font-medium text-sm overflow-hidden">
              <Image
                src="https://i.pravatar.cc/32?img=60"
                alt="User avatar"
                width={32}
                height={32}
                className="object-cover svg-icon"
              />
            </div>
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
              className="text-gray-500"
            >
              <path
                d="M6 9L12 15L18 9"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </button>

          {isProfileOpen && (
            <div
              ref={dropdownRef}
              className="absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-md shadow-lg border border-gray-200 dark:border-gray-700 z-10 header-dropdown-animation"
            >
              <div className="p-3 border-b border-gray-100">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-full bg-indigo-600 flex items-center justify-center text-white font-medium overflow-hidden user-avatar">
                    <Image
                      src="https://i.pravatar.cc/40?img=60"
                      alt="User avatar"
                      width={40}
                      height={40}
                      className="object-cover svg-icon"
                    />
                  </div>
                  <div>
                    <p className="font-medium text-sm">Dr. Sarah Chen</p>
                    <p className="text-xs text-gray-500">Research Lead</p>
                  </div>
                </div>
              </div>

              <nav className="py-1">
                <Link
                  href="/profile"
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  Your Profile
                </Link>
                <Link
                  href="/settings"
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  Settings
                </Link>
                <Link
                  href="/help"
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  Help & Documentation
                </Link>
                <hr className="my-1 border-gray-100" />
                <button className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">
                  Sign Out
                </button>
              </nav>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default Header;
