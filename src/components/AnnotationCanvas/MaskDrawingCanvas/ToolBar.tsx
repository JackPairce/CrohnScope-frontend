// Generated by Copilot
import Image from "next/image";
import { NewMask } from "../MaskUtils";
import { DrawModes, ModesLabels, SaveSatues } from "../types";
interface ToolBarProps {
  mode: DrawModes;
  setMode: (mode: DrawModes) => void;
  brushSize: number;
  setBrushSize: (size: number) => void;
  saveMasks: () => void;
  saveStatus: SaveSatues;
  isAllDone: boolean;
  MarkAllDone: () => void;
  imgDim: { width: number; height: number } | null;
  onMaskUpdate: (mask: HTMLImageElement) => void;
}
const drawModes = ["draw", "erase", "hand"] as const;

export default function MaskDrawingToolbar({
  mode,
  setMode,
  brushSize,
  setBrushSize,
  imgDim,
  onMaskUpdate,
}: ToolBarProps) {
  return (
    <div className="tools-buttons">
      {" "}
      <div className="modes">
        {" "}
        {/* Drawing and erasing tools */}
        {drawModes
          .filter((m) => m !== "hand")
          .map((m) => (
            <button
              key={m}
              onClick={() => setMode(m)}
              className={mode === m ? "active" : ""}
              title={ModesLabels[m]}
            >
              <Image
                src={`/svgs/${m}.svg`}
                alt={m}
                width={24}
                height={24}
                className="svg-icon-colored"
              />
            </button>
          ))}
        {/* Hand tool (for panning) */}
        <button
          onClick={() => setMode("hand")}
          className={mode === "hand" ? "active" : ""}
          title={ModesLabels.hand}
        >
          <Image
            src="/svgs/hand.svg"
            alt="Hand tool"
            width={24}
            height={24}
            className="svg-icon-colored"
          />
        </button>
      </div>
      {mode == "erase" && (
        <div className="brush-size-container">
          <div className="brush-size-icon">
            <Image
              src="/svgs/brush-size.svg"
              alt="Brush Size"
              width={20}
              height={20}
              className="svg-icon"
              style={{
                // apply a blue filer
                filter:
                  "invert(48%) sepia(79%) saturate(2476%) hue-rotate(190deg) brightness(118%) contrast(95%)",
              }}
            />
          </div>
          <div className="brush-size">
            <div className="brush-size-label">
              <span>Size</span>
              <span className="brush-size-value">{brushSize}</span>
            </div>
            <input
              type="range"
              className="brush-size-slider"
              min={10}
              max={100}
              value={brushSize}
              onChange={(e) => setBrushSize(Number(e.target.value))}
            />
            <div
              className="brush-size-preview"
              style={{
                width: `${brushSize / 6.5}px`,
                height: `${brushSize / 6.5}px`,
              }}
            ></div>
          </div>
        </div>
      )}
      {/* Reset mask button */}
      <button
        className="reset-mask-btn group relative flex items-center justify-center p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
        onClick={async () => {
          if (!imgDim) return;
          if (
            confirm("Reset this mask to empty? This action cannot be undo.")
          ) {
            const newMask = await NewMask(imgDim.width, imgDim.height);
            onMaskUpdate(newMask);
          }
        }}
        title="Reset Mask"
      >
        <Image
          src="/svgs/clear-mask.svg"
          alt="Reset Mask"
          width={24}
          height={24}
          className="svg-icon-colored"
        />
        <span className="tooltip">Reset Mask</span>
      </button>
    </div>
  );
}
