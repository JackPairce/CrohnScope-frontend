// Generated by Copilot
import Image from "next/image";
import { Mode, modes, SaveSatues } from "./types";

interface ToolBarProps {
  mode: Mode;
  setMode: (mode: Mode) => void;
  brushSize: number;
  setBrushSize: (size: number) => void;
  saveMasks: () => void;
  saveStatus: SaveSatues;
  isAllDone: boolean;
  MarkAllDone: () => void;
}

export default function MaskDrawingToolbar({
  mode,
  setMode,
  brushSize,
  setBrushSize,
  saveMasks,
  saveStatus,
  isAllDone,
  MarkAllDone,
}: ToolBarProps) {
  return (
    <div className="tools-buttons">
      <div className="modes">
        {modes.slice(0, 2).map((m) => (
          <button
            key={m}
            onClick={() => setMode(m)}
            className={mode === m ? "active" : ""}
          >
            <Image
              src={`/svgs/${m === "draw" ? "brush" : "eraser"}.svg`}
              alt={m}
              width={24}
              height={24}
              className="svg-icon-colored"
            />
          </button>
        ))}
      </div>
      <div className="save-controls">
        <button
          onClick={saveMasks}
          disabled={saveStatus.isSaving || !saveStatus.isModified}
        >
          {saveStatus.isSaving ? "Saving..." : "Save"}
        </button>
        <button
          onClick={MarkAllDone}
          disabled={saveStatus.isMarkingAllDone || isAllDone}
        >
          {saveStatus.isMarkingAllDone ? "Marking..." : "Mark All Done"}
        </button>
      </div>
      {mode == "erase" && (
        <div className="brush-size-container">
          <div className="brush-size-icon">
            <Image
              src="/svgs/brush-size.svg"
              alt="Brush Size"
              width={20}
              height={20}
              className="svg-icon"
              style={{
                // apply a blue filer
                filter:
                  "invert(48%) sepia(79%) saturate(2476%) hue-rotate(190deg) brightness(118%) contrast(95%)",
              }}
            />
          </div>
          <div className="brush-size">
            <div className="brush-size-label">
              <span>Size</span>
              <span className="brush-size-value">{brushSize}</span>
            </div>
            <input
              type="range"
              className="brush-size-slider"
              min={10}
              max={100}
              value={brushSize}
              onChange={(e) => setBrushSize(Number(e.target.value))}
            />
            <div
              className="brush-size-preview"
              style={{
                width: `${brushSize / 6.5}px`,
                height: `${brushSize / 6.5}px`,
              }}
            ></div>
          </div>
        </div>
      )}
    </div>
  );
}
