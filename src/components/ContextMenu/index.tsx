"use client";

import { JSX, useState } from "react";
type Element = JSX.Element;

export type ContextMenuItem =
  | {
      type: "action";
      label: string;
      onClick: () => void | Promise<void> | string;
    }
  | {
      type: "dropdown";
      label: string;
      items: ContextMenuItem[] | string;
    }
  | {
      type: "separator";
      label?: string;
    };

export type ContextMenuItemType = ContextMenuItem["type"];

function LoadingSpinner() {
  return (
    <div className="w-4 h-4 inline-block ml-2">
      <div className="w-full h-full border-2 border-t-transparent border-current rounded-full animate-spin" />
    </div>
  );
}

// Generated by Copilot
function WarningTriangle({ message }: { message?: string }) {
  return (
    <div
      className="w-4 h-4 inline-block ml-2 text-yellow-500 dark:text-yellow-400 cursor-help"
      title={message}
    >
      <svg
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
        <line x1="12" y1="9" x2="12" y2="13" />
        <line x1="12" y1="17" x2="12.01" y2="17" />
      </svg>
    </div>
  );
}

function ActionMenuItem({
  item,
}: {
  item: ContextMenuItem & { type: "action" };
}) {
  const [isLoading, setIsLoading] = useState(false);

  const handleClick = async () => {
    if (typeof item.onClick === "string") return;
    try {
      setIsLoading(true);
      const result = await Promise.resolve(item.onClick());
      // If the click handler returns a string, treat it as a warning
      if (typeof result === "string") return;
    } finally {
      setIsLoading(false);
    }
  };

  const isDisabled = typeof item.onClick === "string";
  const warningMessage =
    typeof item.onClick === "string" ? item.onClick : undefined;

  return (
    <div
      onClick={handleClick}
      style={{
        backgroundColor: "var(--card-bg)",
        color: isDisabled ? "var(--foreground-secondary)" : "var(--foreground)",
        cursor: isDisabled ? "not-allowed" : "pointer",
      }}
      className="px-4 py-1.5 hover:bg-black/5 dark:hover:bg-white/5 text-sm transition-colors flex items-center justify-between"
    >
      {item.label}
      {isLoading && <LoadingSpinner />}
      {warningMessage && <WarningTriangle message={warningMessage} />}
    </div>
  );
}

// Generated by Copilot
// Generated by Copilot
function DropdownMenuItem({
  item,
}: {
  item: ContextMenuItem & { type: "dropdown" };
}) {
  const [isOpen, setIsOpen] = useState(true);

  const isDisabled = typeof item.items === "string";
  const warningMessage =
    typeof item.items === "string" ? item.items : undefined;

  return (
    <li className="relative">
      <div
        className="px-4 py-1.5 text-sm flex items-center justify-between hover:bg-black/5 dark:hover:bg-white/5 transition-colors"
        style={{
          color: isDisabled
            ? "var(--foreground-secondary)"
            : "var(--foreground)",
          cursor: isDisabled ? "not-allowed" : "pointer",
        }}
      >
        {item.label}
        {warningMessage ? (
          <WarningTriangle message={warningMessage} />
        ) : (
          <svg
            className={`w-4 h-4 ml-2 svg-icon transition-transform ${
              isOpen ? "rotate-0" : "-rotate-90"
            }`}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M9 5l7 7-7 7"
            />
          </svg>
        )}
      </div>
      {!isDisabled && isOpen && (
        <div className="absolute left-full -top-1" style={{ zIndex: 1001 }}>
          <ContextMenu items={item.items as ContextMenuItem[]} />
        </div>
      )}
    </li>
  );
}

export default function ContextMenu({
  items,
  position,
}: {
  items: ContextMenuItem[];
  position?: { x: number; y: number };
}) {
  return (
    <ul
      className="min-w-[200px] rounded-md shadow-lg py-1.5 fixed"
      style={{
        backgroundColor: "var(--card-bg)",
        borderColor: "var(--card-border)",
        border: "1px solid",
        ...(position
          ? {
              left: `${position.x}px`,
              top: `${position.y}px`,
            }
          : {}),
        zIndex: 1000,
        scale: 1,
      }}
    >
      {items.map((item, index) => renderContextMenuItem(item, index))}
    </ul>
  );
}

function renderContextMenuItem(
  item: ContextMenuItem,
  key: number
): Element | null {
  switch (item.type) {
    case "action":
      return (
        <li key={key}>
          <ActionMenuItem item={item} />
        </li>
      );
    case "dropdown":
      return <DropdownMenuItem key={key} item={item} />;
    case "separator":
      return (
        <li key={key} className="relative">
          <div
            className="h-px my-2"
            style={{ backgroundColor: "var(--card-border)" }}
          />
          {item.label && (
            <span className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 px-2 text-xs text-foreground-secondary bg-card-bg">
              {item.label}
            </span>
          )}
        </li>
      );
    default:
      return null;
  }
}
