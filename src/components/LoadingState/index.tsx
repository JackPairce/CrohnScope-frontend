// Generated by Copilot
import { useEffect, useState } from "react";
import "./styles.css";

interface LoadingStateProps {
  message?: string;
  timeout?: number;
  onTimeout?: () => void;
}

export default function LoadingState({
  message = "Loading data...",
  timeout = 30000, // Default timeout of 30 seconds
  onTimeout,
}: LoadingStateProps) {
  const [elapsed, setElapsed] = useState(0);
  const [showTimeoutMessage, setShowTimeoutMessage] = useState(false);

  useEffect(() => {
    const interval = setInterval(() => {
      setElapsed((prev) => {
        const newElapsed = prev + 1000;

        // If we've reached the timeout and have an onTimeout handler
        if (newElapsed >= timeout && onTimeout) {
          clearInterval(interval);
          setShowTimeoutMessage(true);
          setTimeout(() => {
            onTimeout();
          }, 3000); // Give user 3 seconds to see the timeout message
        }

        return newElapsed;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [timeout, onTimeout]);

  const progress = Math.min((elapsed / timeout) * 100, 100);
  const isNearingTimeout = progress > 70;

  return (
    <div className="loading-state-container">
      <div className="loading-state-card">
        <div className="loading-state-spinner">
          <svg className="loading-state-icon" viewBox="0 0 24 24">
            <circle className="loading-state-track" cx="12" cy="12" r="10" />
            <circle
              className={`loading-state-indicator ${
                isNearingTimeout ? "nearing-timeout" : ""
              }`}
              cx="12"
              cy="12"
              r="10"
              strokeDashoffset={`${66 - (66 * progress) / 100}`}
            />
          </svg>
        </div>

        <div className="loading-state-content">
          <h3 className="loading-state-title">
            {showTimeoutMessage ? "Taking longer than expected..." : message}
          </h3>

          {showTimeoutMessage ? (
            <p className="loading-state-message">
              We're having trouble loading the data. You'll be redirected to the
              error screen shortly.
            </p>
          ) : (
            <div className="loading-state-progress-container">
              <div className="loading-state-progress-bar">
                <div
                  className={`loading-state-progress-fill ${
                    isNearingTimeout ? "nearing-timeout" : ""
                  }`}
                  style={{ width: `${progress}%` }}
                />
              </div>
              <div className="loading-state-elapsed">
                {Math.floor(elapsed / 1000)}s
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
