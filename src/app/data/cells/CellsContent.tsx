"use client";

// Generated by Copilot
import ConfirmDialog from "@/components/ConfirmDialog";
import Loader from "@/components/loader";
import Toast, { ToastContainer, ToastType } from "@/components/Toast";
import {
  addCells,
  ApiCell,
  deleteCells,
  getCells,
  updateCells,
} from "@/lib/api/cells";
import { useEffect, useState } from "react";

export default function CellsContent() {
  const [cells, setCells] = useState<ApiCell[]>([]);
  const [filteredCells, setFilteredCells] = useState<ApiCell[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCell, setSelectedCell] = useState<ApiCell | null>(null);
  const [editMode, setEditMode] = useState<"view" | "edit" | "add">("view");
  const [formData, setFormData] = useState<Partial<ApiCell>>({});
  const [toasts, setToasts] = useState<
    Array<{ id: string; message: string; type: ToastType }>
  >([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentImageId, setCurrentImageId] = useState<number | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [cellToDelete, setCellToDelete] = useState<ApiCell | null>(null);

  const addToast = (message: string, type: ToastType) => {
    const id = Date.now().toString();
    setToasts((prev) => [...prev, { id, message, type }]);
  };

  const removeToast = (id: string) => {
    setToasts((prev) => prev.filter((toast) => toast.id !== id));
  };

  const fetchCells = async (imageId: number) => {
    setIsLoading(true);
    try {
      const data = await getCells(imageId);
      setCells(data);
      setFilteredCells(data);
      setIsLoading(false);
    } catch (error) {
      console.error("Error fetching cells:", error);
      addToast("Failed to load cells data", "error");
      setIsLoading(false);
    }
  };

  // For demonstration, we'll use a dummy image ID until we integrate with image selection
  useEffect(() => {
    // In a real scenario, you'd get this from a route param or context
    const demoImageId = 1;
    setCurrentImageId(demoImageId);
    fetchCells(demoImageId);
  }, []);

  const handleImageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const imageId = parseInt(event.target.value);
    setCurrentImageId(imageId);
    fetchCells(imageId);
  };

  useEffect(() => {
    if (searchQuery) {
      const filtered = cells.filter(
        (cell) =>
          cell.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          (cell.description &&
            cell.description.toLowerCase().includes(searchQuery.toLowerCase()))
      );
      setFilteredCells(filtered);
    } else {
      setFilteredCells(cells);
    }
  }, [cells, searchQuery]);

  const handleEdit = (cell: ApiCell) => {
    setSelectedCell(cell);
    setFormData({ ...cell });
    setEditMode("edit");
  };

  const handleAdd = () => {
    setSelectedCell(null);
    setFormData({ name: "", description: "", img: "" });
    setEditMode("add");
  };

  // Handle showing delete confirmation dialog
  const handleDeleteClick = (cell: ApiCell) => {
    setCellToDelete(cell);
    setShowDeleteConfirm(true);
  };

  const handleDelete = async (id: number) => {
    try {
      if (currentImageId) {
        // Get current cells without the one to delete
        await deleteCells(id);
        const updatedCells = cells.filter((cell) => cell.id !== id);
        setCells(updatedCells);
        addToast("Cell deleted successfully", "success");
      } else {
        throw new Error("No image ID available");
      }
    } catch (error) {
      console.error("Error deleting cell:", error);
      addToast("Failed to delete cell", "error");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      let updatedCells = [...cells];

      if (editMode === "add") {
        // Create a new cell with a temporary ID (backend will assign a real one)
        const newCell = {
          ...formData,
          id: cells.length + 1,
        } as ApiCell;
        newCell.id = (await addCells(currentImageId!, newCell)).cell_type.id;

        // Add the new cell to the cells array
        updatedCells = [...updatedCells, newCell];
      } else if (editMode === "edit" && selectedCell) {
        await updateCells(currentImageId!, formData as ApiCell);

        // Update existing cell
        updatedCells = updatedCells.map((cell) =>
          cell.id === selectedCell.id
            ? ({ ...cell, ...formData } as ApiCell)
            : cell
        );
      }

      // Save to the backend if we have an image ID
      if (currentImageId) {
        setCells(updatedCells);
        addToast(
          `Cell ${editMode === "add" ? "added" : "updated"} successfully`,
          "success"
        );
      } else {
        throw new Error("No image ID available");
      }

      setEditMode("view");
      setSelectedCell(null);
    } catch (error) {
      console.error("Error saving cell:", error);
      addToast("Failed to save cell", "error");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCancel = () => {
    setEditMode("view");
    setSelectedCell(null);
  };

  // Handle image upload directly from the cell details view
  // Generated by Copilot
  const handleImageUpload = (cell: ApiCell) => {
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/*";
    fileInput.onchange = async (e) => {
      const target = e.target as HTMLInputElement;
      if (target.files && target.files[0]) {
        const reader = new FileReader();
        reader.onload = async () => {
          try {
            const base64String = reader.result?.toString().split(",")[1] || "";

            // Update the cell with the new image
            let updatedCells = cells.map((c) =>
              c.id === cell.id ? { ...c, img: base64String } : c
            );

            // Save to the backend if we have an image ID
            if (currentImageId) {
              setIsSubmitting(true);
              await uploadCells(currentImageId, updatedCells);
              setCells(updatedCells);
              setSelectedCell({ ...cell, img: base64String });
              addToast("Cell image updated successfully", "success");
            } else {
              throw new Error("No image ID available");
            }
          } catch (error) {
            console.error("Error updating cell image:", error);
            addToast("Failed to update cell image", "error");
          } finally {
            setIsSubmitting(false);
          }
        };
        reader.readAsDataURL(target.files[0]);
      }
    };
    fileInput.click();
  };

  const renderForm = () => {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h2 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">
          {editMode === "add" ? "Add New Cell" : "Edit Cell"}
        </h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label
              htmlFor="name"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
            >
              Name
            </label>
            <input
              type="text"
              id="name"
              value={formData.name || ""}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              required
            />
          </div>
          <div className="mb-6">
            <label
              htmlFor="description"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
            >
              Description
            </label>
            <textarea
              id="description"
              value={formData.description || ""}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white h-24"
            />
          </div>
          <div className="mb-6">
            <label
              htmlFor="cellImage"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
            >
              Cell Image
            </label>
            <div className="mt-1 flex items-center">
              {formData.img ? (
                <div className="mr-4">
                  <img
                    src={`data:image/jpeg;base64,${formData.img}`}
                    alt="Cell preview"
                    className="h-24 w-24 object-cover rounded-md border border-gray-300 dark:border-gray-600"
                  />
                </div>
              ) : (
                <div className="mr-4 h-24 w-24 bg-gray-100 dark:bg-gray-700 rounded-md border border-gray-300 dark:border-gray-600 flex items-center justify-center">
                  <svg
                    className="h-12 w-12 text-gray-400"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="1.5"
                      d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                    />
                  </svg>
                </div>
              )}
              <div>
                <label className="cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  <span>Upload a file</span>
                  <input
                    id="cellImage"
                    name="cellImage"
                    type="file"
                    accept="image/*"
                    className="sr-only"
                    onChange={(e) => {
                      if (e.target.files && e.target.files[0]) {
                        const reader = new FileReader();
                        reader.onload = () => {
                          const base64String =
                            reader.result?.toString().split(",")[1] || "";
                          setFormData({ ...formData, img: base64String });
                        };
                        reader.readAsDataURL(e.target.files[0]);
                      }
                    }}
                  />
                </label>
              </div>
            </div>
            <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
              Upload a cell image (PNG, JPG, GIF up to 5MB)
            </p>
          </div>
          <div className="flex justify-end space-x-3">
            <button
              type="button"
              onClick={handleCancel}
              className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              disabled={isSubmitting}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="inline-flex justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-70"
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <svg
                    className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    ></circle>
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    ></path>
                  </svg>
                  Saving...
                </>
              ) : editMode === "add" ? (
                "Add Cell"
              ) : (
                "Update Cell"
              )}
            </button>
          </div>
        </form>
      </div>
    );
  };

  const renderCellDetails = (cell: ApiCell) => {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-white">
            Cell Details
          </h2>
          <div className="flex space-x-2">
            <button
              onClick={() => handleEdit(cell)}
              className="px-3 py-1.5 bg-indigo-600 text-white rounded hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              Edit
            </button>
            <button
              onClick={() => {
                setCellToDelete(cell);
                setShowDeleteConfirm(true);
              }}
              className="px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
            >
              Delete
            </button>
          </div>
        </div>

        <div className="mb-4">
          {cell.img ? (
            <div className="w-full flex justify-center mb-4 relative group">
              <img
                src={`data:image/jpeg;base64,${cell.img}`}
                alt={cell.name}
                className="max-h-48 object-contain rounded-md border border-gray-200 dark:border-gray-700 cursor-pointer hover:opacity-90 transition-opacity"
                onClick={() => handleImageUpload(cell)}
                title="Click to change image"
              />
              <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                <div className="bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                  Click to change image
                </div>
              </div>
            </div>
          ) : (
            <div
              className="w-full flex justify-center mb-4 cursor-pointer"
              onClick={() => handleImageUpload(cell)}
              title="Click to add an image"
            >
              <div className="h-48 w-48 bg-gray-100 dark:bg-gray-700 rounded-md border border-gray-200 dark:border-gray-700 flex items-center justify-center hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                <svg
                  className="w-24 h-24 text-gray-400"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="1.5"
                    d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                  />
                </svg>
              </div>
            </div>
          )}
        </div>

        <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
          <dl>
            <div className="bg-gray-50 dark:bg-gray-700 px-4 py-4 sm:grid sm:grid-cols-3 sm:gap-4 rounded-md mb-2">
              <dt className="text-sm font-medium text-gray-500 dark:text-gray-300">
                Name
              </dt>
              <dd className="mt-1 text-sm text-gray-900 dark:text-white sm:mt-0 sm:col-span-2">
                {cell.name}
              </dd>
            </div>
            <div className="bg-white dark:bg-gray-800 px-4 py-4 sm:grid sm:grid-cols-3 sm:gap-4 rounded-md">
              <dt className="text-sm font-medium text-gray-500 dark:text-gray-300">
                Description
              </dt>
              <dd className="mt-1 text-sm text-gray-900 dark:text-white sm:mt-0 sm:col-span-2">
                {cell.description || "No description provided"}
              </dd>
            </div>
          </dl>
        </div>
      </div>
    );
  };

  return (
    <div className="container mx-auto px-4 py-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-800 dark:text-white">
            Cell Management
          </h1>
          <p className="text-gray-600 dark:text-gray-300 mt-1">
            View, create, update, and delete cell data
          </p>
        </div>

        <div className="flex items-center gap-4">
          <button
            onClick={handleAdd}
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <svg
              className="-ml-1 mr-2 h-5 w-5"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 6v6m0 0v6m0-6h6m-6 0H6"
              />
            </svg>
            Add New Cell
          </button>

          <div className="relative">
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search cells..."
              className="pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            />
            <svg
              className="absolute left-3 top-2.5 h-5 w-5 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              ></path>
            </svg>
          </div>
        </div>
      </div>

      {/* Main content area */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Left column: Cell list */}
        <div className="md:col-span-2">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
            {isLoading ? (
              <div className="h-64">
                <Loader message="Loading cells data..." />
              </div>
            ) : filteredCells.length === 0 ? (
              <div className="flex flex-col items-center justify-center h-64 p-6 text-center">
                <svg
                  className="w-16 h-16 text-gray-400 mb-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"
                  ></path>
                </svg>
                <h3 className="text-xl font-medium text-gray-700 dark:text-gray-300">
                  No cells found
                </h3>
                <p className="text-gray-500 dark:text-gray-400 mt-1">
                  {searchQuery
                    ? "No cells match your search query."
                    : "Start by adding a new cell."}
                </p>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                  <thead className="bg-gray-50 dark:bg-gray-700">
                    <tr>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
                      >
                        ID
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
                      >
                        Image
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
                      >
                        Name
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
                      >
                        Description
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
                      >
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    {filteredCells.map((cell) => (
                      <tr
                        key={cell.id}
                        className={`hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer ${
                          selectedCell?.id === cell.id
                            ? "bg-indigo-50 dark:bg-indigo-900/30"
                            : ""
                        }`}
                        onClick={() => {
                          if (editMode === "view") {
                            setSelectedCell(cell);
                          }
                        }}
                      >
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                          {cell.id}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          {cell.img ? (
                            <img
                              src={`data:image/jpeg;base64,${cell.img}`}
                              alt={cell.name}
                              className="h-10 w-10 rounded-md object-cover"
                            />
                          ) : (
                            <div className="h-10 w-10 bg-gray-100 dark:bg-gray-700 rounded-md flex items-center justify-center">
                              <svg
                                className="h-6 w-6 text-gray-400"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth="1.5"
                                  d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                                />
                              </svg>
                            </div>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-medium text-gray-900 dark:text-white">
                            {cell.name}
                          </div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="text-sm text-gray-500 dark:text-gray-400 truncate max-w-xs">
                            {cell.description || "—"}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleEdit(cell);
                            }}
                            className="text-indigo-600 dark:text-indigo-400 hover:text-indigo-900 dark:hover:text-indigo-300 mr-4"
                          >
                            Edit
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              setCellToDelete(cell);
                              setShowDeleteConfirm(true);
                            }}
                            className="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300"
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        </div>

        {/* Right column: Cell details or form */}
        <div>
          {editMode !== "view" ? (
            renderForm()
          ) : selectedCell ? (
            renderCellDetails(selectedCell)
          ) : (
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 h-64 flex flex-col items-center justify-center text-center">
              <svg
                className="w-12 h-12 text-gray-400 mb-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                ></path>
              </svg>
              <p className="text-gray-500 dark:text-gray-400">
                Select a cell from the list to view details or click "Add New
                Cell" to create one
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Delete confirmation dialog */}
      {cellToDelete && (
        <ConfirmDialog
          isOpen={showDeleteConfirm}
          title="Delete Cell"
          message={`Are you sure you want to delete this cell${
            cellToDelete.name ? ` "${cellToDelete.name}"` : ""
          }? This action cannot be undone.`}
          dialogType="danger"
          actions={[
            {
              label: "Cancel",
              value: false,
              type: "default",
              autoFocus: true,
            },
            {
              label: "Delete",
              value: true,
              type: "danger",
            },
          ]}
          onClose={(confirmed: boolean) => {
            if (confirmed) {
              handleDelete(cellToDelete.id);
            }
            setShowDeleteConfirm(false);
            setCellToDelete(null);
          }}
        />
      )}

      <ToastContainer>
        {toasts.map((toast) => (
          <Toast
            key={toast.id}
            message={toast.message}
            type={toast.type}
            onClose={() => removeToast(toast.id)}
          />
        ))}
      </ToastContainer>
    </div>
  );
}
