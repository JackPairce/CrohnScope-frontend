"use server";

import { drive_v3 } from "googleapis";
import { Readable } from "stream";
import { DownloadFileFromDrive, getDriveClient } from "../_lib/googledrive";

// TODO: Use env variable
const ParentFolderId = "1Tj0eBH6Ih7CyXl2TueAWRd6z5dU030WT";

class FileLister {
  private driveClient!: drive_v3.Drive;

  constructor() {
    // Lazy-load or inject the client
  }

  async init() {
    this.driveClient = await getDriveClient();
  }

  async listDriveFiles(folderId: string): Promise<drive_v3.Schema$File[]> {
    const res = await this.driveClient.files.list({
      q: `'${folderId}' in parents`,
      fields: "files(id, name, mimeType, modifiedTime)",
      orderBy: "modifiedTime desc",
    });
    return res.data.files || [];
  }

  async listAsRawFiles(folderId: string): Promise<File[]> {
    const driveFiles = await this.listDriveFiles(folderId);
    return driveFiles.map(
      (file) =>
        new File([], file.name!, {
          type: file.mimeType || "application/octet-stream",
          lastModified: parseInt(file.modifiedTime || "0"),
        })
    );
  }

  async listWithData(folderId: string) {
    const driveFiles = await this.listDriveFiles(folderId);
    return Promise.all(
      driveFiles.map(
        async (file) =>
          await DownloadFileFromDrive(this.driveClient, file.id!, file.name!)
      )
    );
    // return [await DownloadFileFromDrive(this.driveClient, driveFiles[0].id!)];
  }
}
export async function listWithData(folderId: string) {
  const fileLister = new FileLister();
  await fileLister.init();
  return fileLister.listWithData(folderId);
}
export async function listAsRawFiles(folderId: string) {
  const fileLister = new FileLister();
  await fileLister.init();
  return fileLister.listAsRawFiles(folderId);
}
export async function listDriveFiles(folderId: string) {
  const fileLister = new FileLister();
  await fileLister.init();
  return fileLister.listDriveFiles(folderId);
}

export async function CreateFolder({
  name,
  ParentDirectoryId,
}: {
  name: string;
  ParentDirectoryId: string;
}) {
  const drive = await getDriveClient();
  const fileMetadata = {
    name: name,
    mimeType: "application/vnd.google-apps.folder",
    parents: [ParentDirectoryId],
  };
  const res = await drive.files.create({
    requestBody: fileMetadata,
    fields: "id",
  });
  return res.data.id;
}

export async function UploadFile({
  file,
  inFolderId,
}: {
  file: File;
  inFolderId: string;
}) {
  const drive = await getDriveClient();
  const fileMetadata = {
    name: file.name.split(".")[0],
    parents: [inFolderId],
  };
  const media = {
    mimeType: file.type,
    body: Readable.from(Buffer.from(await file.arrayBuffer())),
  };
  const res = await drive.files.create({
    requestBody: fileMetadata,
    media,
    fields: "id",
  });
  return res.data.id;
}

export async function DeleteFile(fileId: string) {
  const drive = await getDriveClient();
  await drive.files.delete({
    fileId,
  });
}
// Generated by Copilot
export async function GetFile(fileId: string, name?: string) {
  const drive = await getDriveClient();
  try {
    return DownloadFileFromDrive(drive, fileId, name || "unknown");
  } catch (error: any) {
    if (error.response?.status === 404 && name) {
      // File not found, create a new one
      const newFileId = await CreateFolder({
        name,
        ParentDirectoryId: ParentFolderId,
      });
      return { message: "File not found. Created a new folder.", newFileId };
    }
    throw error; // Re-throw other errors
  }
}
