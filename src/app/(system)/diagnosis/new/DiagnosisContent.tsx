"use client";
// Generated by Copilot

import Loader from "@/components/loader";
import Link from "next/link";
import { useEffect, useState } from "react";

export default function DiagnosisContent() {
  const [step, setStep] = useState(1);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  // Simulate error handling for any async operations
  useEffect(() => {
    const checkDiagnosisAvailability = async () => {
      try {
        // In a real app, this would be an API call to check service availability
        // For now, we're just setting up the error handling pattern
      } catch (err) {
        setError(
          err instanceof Error
            ? err
            : new Error("Failed to initialize diagnosis service")
        );
      }
    };

    checkDiagnosisAvailability();
  }, []);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    try {
      if (!e.target.files?.length) return;
      setUploading(true);
      // Simulate upload
      setTimeout(() => {
        setUploading(false);
        setStep(2);
      }, 1500);
    } catch (err) {
      setError(err instanceof Error ? err : new Error("File upload failed"));
      setUploading(false);
    }
  };

  // Throw any errors to be caught by the error boundary
  if (error) {
    throw error;
  }

  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-semibold text-gray-900 dark:text-white">
              New Diagnosis
            </h1>
            <Link
              href="/patients"
              className="inline-flex items-center px-3 py-1 border border-gray-300 dark:border-gray-600 shadow-sm text-sm leading-5 font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Back to Patients
            </Link>
          </div>
        </div>
      </header>

      {/* Progress Steps */}
      <div className="border-b bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex justify-center" aria-label="Progress">
            <ol className="flex items-center">
              {[
                "Patient Selection",
                "Image Upload",
                "AI Analysis",
                "Review & Diagnosis",
              ].map((stepName, index) => (
                <li key={stepName} className="relative flex items-center">
                  <div
                    className={`flex items-center ${
                      index + 1 < step
                        ? "text-blue-600 dark:text-blue-400"
                        : index + 1 === step
                        ? "text-blue-600 dark:text-blue-400"
                        : "text-gray-400 dark:text-gray-500"
                    }`}
                  >
                    <span className="relative flex h-8 w-8 items-center justify-center rounded-full border-2 border-current bg-white dark:bg-gray-800">
                      {index + 1 < step ? (
                        <svg
                          className="h-5 w-5"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path
                            fillRule="evenodd"
                            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                            clipRule="evenodd"
                          />
                        </svg>
                      ) : (
                        <span>{index + 1}</span>
                      )}
                    </span>
                    <span className="ml-4 text-sm font-medium">{stepName}</span>
                  </div>
                  {index < 3 && (
                    <div
                      className={`absolute right-0 top-4 h-0.5 w-full ${
                        index + 1 < step
                          ? "bg-blue-600"
                          : "bg-gray-200 dark:bg-gray-600"
                      }`}
                    />
                  )}
                </li>
              ))}
            </ol>
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <main className="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {step === 1 && (
          <div className="max-w-3xl mx-auto">
            <div className="bg-white dark:bg-gray-800 shadow sm:rounded-lg">
              <div className="px-4 py-5 sm:p-6">
                <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">
                  Upload Patient Images
                </h3>
                <div className="mt-2 max-w-xl text-sm text-gray-500 dark:text-gray-400">
                  <p>
                    Upload patient images for AI-assisted diagnosis. Supported
                    formats: JPEG, PNG, DICOM.
                  </p>
                </div>
                <div className="mt-5">
                  <div className="flex items-center justify-center w-full">
                    <label
                      htmlFor="dropzone-file"
                      className="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-700 dark:bg-gray-800 hover:bg-gray-100 dark:border-gray-600"
                    >
                      <div className="flex flex-col items-center justify-center pt-5 pb-6">
                        <svg
                          className="w-10 h-10 mb-3 text-gray-400"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth="2"
                            d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                          ></path>
                        </svg>
                        {uploading ? (
                          <div className="flex flex-col items-center">
                            <Loader className="scale-75" />
                            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
                              Uploading...
                            </p>
                          </div>
                        ) : (
                          <div className="text-center">
                            <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                              <span className="font-semibold">
                                Click to upload
                              </span>{" "}
                              or drag and drop
                            </p>
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                              JPEG, PNG or DICOM (MAX. 800x400px)
                            </p>
                          </div>
                        )}
                      </div>
                      <input
                        id="dropzone-file"
                        type="file"
                        className="hidden"
                        onChange={handleFileUpload}
                      />
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Additional step content would go here */}
      </main>
    </div>
  );
}
