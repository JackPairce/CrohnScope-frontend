"use client";

import { useImages } from "@/components/AnnotationCanvas/ImagesNav/useImages";
import ImageViewer from "@/components/ImageViewer/ImageViewer";
import Toast, { ToastContainer, ToastType } from "@/components/Toast";
import {
  ApiDiagnosis,
  ApiImage,
  GetDiagnosisByImageID,
  getDiseases,
  SetDiagnosis,
} from "@/lib/api";
import Link from "next/link";
import { useEffect, useState } from "react";
const DefaultState = {
  disease_id: null,
  phase: null,
  image_id: 0,
  notes: "",
};
export default function AnalysisContent() {
  const [selectedImage, setSelectedImage] = useState<ApiImage | null>(null);
  const [diseases, setDiseases] =
    useState<Array<{ id: number; name: string }>>();
  const [diagnosis, setDiagnosis] =
    useState<Required<ApiDiagnosis>>(DefaultState);
  const [loading_form, setLoadingForm] = useState(false);

  useEffect(() => {
    getDiseases().then((diseases) => {
      setDiseases(
        diseases.map((disease) => ({
          id: disease.id,
          name: disease.name,
        }))
      );
    });
  }, []);

  useEffect(() => {
    if (selectedImage) {
      setLoadingForm(true);
      GetDiagnosisByImageID(selectedImage.id).then((data) => {
        const formData = data || DefaultState;
        setDiagnosis({
          disease_id: formData.disease_id ?? null,
          phase: formData.phase ?? null,
          notes: formData.notes ?? "",
          image_id: selectedImage.id,
        });
        setLoadingForm(false);
      });
    } else {
      setDiagnosis(DefaultState);
    }
  }, [selectedImage]);

  const [toasts, setToasts] = useState<
    Array<{ id: string; message: string; type: ToastType }>
  >([]);

  const addToast = (message: string, type: ToastType) => {
    const id = Date.now().toString();
    setToasts((prev) => [...prev, { id, message, type }]);
  };

  const removeToast = (id: string) => {
    setToasts((prev) => prev.filter((toast) => toast.id !== id));
  };

  const { images, isLoading, pageLength, loadNextPage } = useImages(addToast);

  const handleSaveDiagnosis = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedImage) {
      addToast("Please select an image first", "error");
      return;
    }
    if (diagnosis.disease_id == 0) diagnosis.phase = null;

    await SetDiagnosis(diagnosis);

    setSelectedImage(null);

    addToast("Diagnosis saved successfully", "success");
  };

  const DiagnosisForm = (
    <>
      {diseases && diseases.length > 0 ? (
        <form onSubmit={handleSaveDiagnosis} className="p-6">
          <h2
            className="text-xl font-bold mb-4"
            style={{ color: "var(--foreground)" }}
          >
            Diagnosis Details
          </h2>

          {/* Status Selection */}
          <div className="mb-4">
            <label
              className="block text-sm font-medium mb-2"
              style={{ color: "var(--text-muted)" }}
            >
              Status
            </label>
            <select
              value={diagnosis.disease_id == null ? -1 : diagnosis.disease_id}
              onChange={(e) =>
                setDiagnosis({
                  ...diagnosis,
                  disease_id: parseInt(e.target.value),
                })
              }
              className="w-full p-2 rounded-md border"
              style={{
                background: "var(--input-bg)",
                color: "var(--foreground)",
                borderColor: "var(--card-border)",
              }}
            >
              // Generated by Copilot
              <option
                value={-1}
                style={{
                  display: "none",
                }}
              >
                Select status
              </option>
              <option
                value={0}
                style={{
                  color: "#22c55e", // Green color for healthy option
                }}
              >
                Healthy
              </option>
              {diseases &&
                diseases.map((disease) => (
                  <option key={disease.id} value={disease.id}>
                    {disease.name}
                  </option>
                ))}
            </select>
          </div>

          {/* Phase Selection */}
          {diagnosis.disease_id && diagnosis.disease_id > 0 ? (
            <div className="mb-4">
              <label
                className="block text-sm font-medium mb-2"
                style={{ color: "var(--text-muted)" }}
              >
                Phase
              </label>
              <input
                type="number"
                value={diagnosis.phase || ""}
                onChange={(e) =>
                  setDiagnosis({
                    ...diagnosis,
                    phase: e.target.value ? parseInt(e.target.value) : null,
                  })
                }
                className="w-full p-2 rounded-md border"
                style={{
                  background: "var(--input-bg)",
                  color: "var(--foreground)",
                  borderColor: "var(--card-border)",
                }}
                min={0}
                max={10}
                placeholder="Enter phase (0-10)"
              />
            </div>
          ) : (
            <></>
          )}

          {/* Notes */}
          <div className="mb-4">
            <label
              className="block text-sm font-medium mb-2"
              style={{ color: "var(--text-muted)" }}
            >
              Notes
            </label>
            <textarea
              value={diagnosis.notes || ""}
              onChange={(e) =>
                setDiagnosis({
                  ...diagnosis,
                  notes: e.target.value,
                })
              }
              className="w-full p-2 rounded-md border min-h-20"
              style={{
                background: "var(--input-bg)",
                color: "var(--foreground)",
                borderColor: "var(--card-border)",
              }}
              rows={4}
              placeholder="Add any additional observations..."
            />
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            className="w-full py-2 px-4 rounded-md transition-opacity hover:opacity-90"
            style={{
              background:
                diagnosis.disease_id != null
                  ? "var(--button-primary)"
                  : "var(--button-disabled)",
              color: "white",
              cursor: diagnosis.disease_id != null ? "pointer" : "not-allowed",
              opacity: diagnosis.disease_id != null ? 1 : 0.6,
            }}
            disabled={diagnosis.disease_id == null}
          >
            Save Diagnosis
          </button>
        </form>
      ) : (
        <div className="p-8 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <h2
            className="text-2xl font-bold mb-4 flex items-center"
            style={{ color: "var(--foreground)" }}
          >
            <svg
              className="w-6 h-6 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
              />
            </svg>
            No Diseases Available
          </h2>
          <p
            className="text-base leading-relaxed mb-6"
            style={{ color: "var(--text-muted)" }}
          >
            Please add diseases in the system settings to proceed with
            diagnosis.
          </p>
          <Link
            href="/data/diseases"
            className="inline-flex items-center px-4 py-2 rounded-md transition-all duration-200 hover:opacity-90"
            style={{
              background: "var(--button-primary)",
              color: "white",
            }}
          >
            <span>Go to Diseases Management</span>
            <svg
              className="w-4 h-4 ml-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 5l7 7-7 7"
              />
            </svg>
          </Link>
        </div>
      )}
    </>
  );

  return (
    <div className="container mx-auto px-4 py-6">
      {/* Header Section */}
      <div className="mb-6">
        <h1
          className="text-2xl font-bold mb-2"
          style={{ color: "var(--foreground)" }}
        >
          Histology Analysis
        </h1>
        <p className="text-base" style={{ color: "var(--text-muted)" }}>
          {selectedImage
            ? "Analyze the selected histological sample and provide a detailed diagnosis."
            : "Select a histological sample from the library below to begin analysis and diagnosis."}
        </p>
      </div>

      {selectedImage ? (
        <ImageViewer
          image={selectedImage}
          onClose={() => setSelectedImage(null)}
          onDelete={async () => false} // In diagnosis view, we don't allow deletion
          sidePanel={
            loading_form ? (
              <div className="flex justify-center items-center w-full h-full">
                <div className="flex items-center gap-3">
                  <div
                    className="w-5 h-5 border-2 rounded-full animate-spin"
                    style={{
                      borderColor: "var(--button-primary-hover)",
                      borderTopColor: "transparent",
                    }}
                  />
                  <span style={{ color: "var(--text-muted)" }}>
                    Loading form...
                  </span>
                </div>
              </div>
            ) : (
              DiagnosisForm
            )
          }
        />
      ) : (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
          <div className="p-4" style={{ background: "var(--card-bg)" }}>
            <div className="flex justify-between items-center mb-4">
              <h3
                className="text-lg font-medium"
                style={{ color: "var(--foreground)" }}
              >
                Available Images
              </h3>
              {images.length > 0 && (
                <span
                  className="text-sm"
                  style={{ color: "var(--text-muted)" }}
                >
                  {images.length} images
                </span>
              )}
            </div>

            {!(isLoading && images.length === 0) &&
              (images.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-[400px] gap-6">
                  <p
                    className="text-center"
                    style={{ color: "var(--text-muted)" }}
                  >
                    No images available. Please upload images to proceed with
                    analysis.
                  </p>
                  <Link
                    href="/data/images"
                    className="inline-flex items-center px-4 py-2 rounded-md transition-all duration-200 hover:opacity-90"
                    style={{
                      background: "var(--button-primary)",
                      color: "white",
                    }}
                  >
                    <svg
                      className="w-4 h-4 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                      />
                    </svg>
                    Go to Image Upload
                  </Link>
                </div>
              ) : (
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                  {images.map((image) => (
                    <div
                      key={image.id}
                      onClick={() => setSelectedImage(image)}
                      className="cursor-pointer rounded-lg overflow-hidden shadow-sm transition-all duration-200 hover:shadow-md"
                      style={{
                        background: "var(--input-bg)",
                        borderColor: "var(--card-border)",
                        border: "1px solid",
                      }}
                    >
                      <div className="relative pt-[100%]">
                        <img
                          src={image.src}
                          alt={image.filename}
                          className="absolute inset-0 w-full h-full object-cover"
                        />
                      </div>
                      <div className="p-2">
                        <p
                          className="truncate text-sm"
                          style={{ color: "var(--foreground)" }}
                        >
                          {image.filename}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              ))}

            {isLoading ? (
              <div className="flex justify-center py-8">
                <div
                  className="flex items-center justify-center gap-3 text-sm"
                  style={{ color: "var(--text-muted)" }}
                >
                  <div
                    className="w-5 h-5 border-2 rounded-full animate-spin"
                    style={{
                      borderColor: "var(--button-primary-hover)",
                      borderTopColor: "transparent",
                    }}
                  />
                  <span>{`Loading ${
                    images.length > 0 ? "more" : ""
                  } images...`}</span>
                </div>
              </div>
            ) : (
              images.length < pageLength && (
                <div className="flex justify-center mt-8">
                  <button
                    onClick={loadNextPage}
                    className="group inline-flex items-center px-6 py-3 text-sm font-medium rounded-lg shadow-sm transition-all duration-200 ease-in-out gap-2 hover:shadow-md"
                    style={{
                      background: "var(--button-primary)",
                      color: "white",
                    }}
                  >
                    <span>Load More</span>
                    <span
                      className="inline-flex items-center justify-center text-xs font-medium px-2 py-0.5 rounded-md"
                      style={{ background: "var(--button-primary-hover)" }}
                    >
                      {pageLength - images.length}
                    </span>
                  </button>
                </div>
              )
            )}
          </div>
        </div>
      )}

      <ToastContainer>
        {toasts.map((toast) => (
          <Toast
            key={toast.id}
            message={toast.message}
            type={toast.type}
            onClose={() => removeToast(toast.id)}
          />
        ))}
      </ToastContainer>
    </div>
  );
}
