"use client";
// Generated by Copilot
import { ApiFeature } from "@/lib/api";
import { useCallback, useState } from "react";
import SeverityUI from "./SeverityUI";

interface FeatureFormProps {
  formData: Partial<ApiFeature>;
  editMode: "edit" | "add";
  isSubmitting: boolean;
  onSubmit: (data: Partial<ApiFeature>) => Promise<void>;
  onCancel: () => void;
  existingFeatures: ApiFeature[];
  maxSeverity: {
    value: number;
    setter: (value: number) => void;
  };
}

export default function FeatureForm({
  formData: initialFormData,
  editMode,
  isSubmitting,
  onSubmit,
  onCancel,
  existingFeatures,
  maxSeverity,
}: FeatureFormProps) {
  const [formData, setFormData] =
    useState<Partial<ApiFeature>>(initialFormData);
  const [previousMaxSeverity, setPreviousMaxSeverity] = useState<number>(
    maxSeverity.value
  );

  const isDuplicateName = useCallback(
    (name: string) =>
      existingFeatures.some(
        (f) =>
          f.name.toLowerCase() === name.toLowerCase() &&
          f.id !== initialFormData.id
      ),
    [existingFeatures, initialFormData.id]
  );

  const nameExists = formData.name && isDuplicateName(formData.name);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await onSubmit(formData);
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const reader = new FileReader();
      reader.onload = () => {
        const base64String = reader.result?.toString().split(",")[1] || "";
        setFormData({ ...formData, img: base64String });
      };
      reader.readAsDataURL(e.target.files[0]);
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
      <h2 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">
        {editMode === "add" ? "Add New Feature" : "Edit Feature"}
      </h2>
      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Name
          </label>
          <input
            type="text"
            id="name"
            value={formData.name || ""}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white ${
              nameExists
                ? "border-red-500 dark:border-red-400"
                : "border-gray-300 dark:border-gray-600"
            }`}
            required
          />
          {nameExists && (
            <p className="text-red-500 text-xs mt-1">
              A feature with this name already exists.
            </p>
          )}
        </div>

        <div className="mb-4">
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Description
          </label>
          <textarea
            id="description"
            value={formData.description || ""}
            onChange={(e) =>
              setFormData({ ...formData, description: e.target.value })
            }
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white h-24"
          />
        </div>

        <div className="mb-6">
          <label
            htmlFor="severity"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Severity
          </label>
          <div className="flex items-center gap-2">
            <button
              type="button"
              disabled={formData.severity === 0}
              onClick={() => {
                if (formData.severity && formData.severity > 0) {
                  setFormData({
                    ...formData,
                    severity: Math.max(0, (formData.severity ?? 0) - 1),
                  });
                  if (
                    formData.severity - 1 < maxSeverity.value &&
                    previousMaxSeverity < maxSeverity.value
                  ) {
                    maxSeverity.setter(maxSeverity.value - 1);
                  }
                }
              }}
              className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-150 ease-in-out"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                  clipRule="evenodd"
                />
              </svg>
            </button>
            <SeverityUI
              current={formData.severity ?? 0}
              max={maxSeverity.value}
            />
            <button
              type="button"
              onClick={() => {
                if (formData.severity === undefined) {
                  setFormData({ ...formData, severity: 1 });
                } else {
                  if (formData.severity + 1 > maxSeverity.value) {
                    maxSeverity.setter(maxSeverity.value + 1);
                  }
                  setFormData({
                    ...formData,
                    severity: Math.min(
                      maxSeverity.value + 1,
                      (formData.severity ?? 0) + 1
                    ),
                  });
                }
              }}
              className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-150 ease-in-out"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                  clipRule="evenodd"
                />
              </svg>
            </button>
          </div>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
            Adjust the severity level of this feature
          </p>
        </div>

        <div className="mb-6">
          <label
            htmlFor="featureImage"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Feature Image
          </label>
          <div className="mt-1 flex items-center">
            {formData.img ? (
              <div className="mr-4">
                <img
                  src={`data:image/jpeg;base64,${formData.img}`}
                  alt="Feature preview"
                  className="h-24 w-24 object-cover rounded-md border border-gray-300 dark:border-gray-600"
                />
              </div>
            ) : (
              <div className="mr-4 h-24 w-24 bg-gray-100 dark:bg-gray-700 rounded-md border border-gray-300 dark:border-gray-600 flex items-center justify-center">
                <svg
                  className="h-12 w-12 text-gray-400"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="1.5"
                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                  />
                </svg>
              </div>
            )}
            <div>
              <label className="cursor-pointer bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <span>Upload a file</span>
                <input
                  id="featureImage"
                  name="featureImage"
                  type="file"
                  accept="image/*"
                  className="sr-only"
                  onChange={handleImageUpload}
                />
              </label>
            </div>
          </div>
          <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
            Upload a feature image (PNG, JPG, GIF up to 5MB)
          </p>
        </div>

        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={() => {
              setFormData(initialFormData);
              maxSeverity.setter(previousMaxSeverity);
              onCancel();
            }}
            className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            disabled={isSubmitting}
          >
            Cancel
          </button>
          <button
            type="submit"
            className="inline-flex justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-70"
            disabled={isSubmitting || !!nameExists}
          >
            {isSubmitting ? (
              <>
                <svg
                  className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  ></path>
                </svg>
                Saving...
              </>
            ) : editMode === "add" ? (
              "Add Feature"
            ) : (
              "Update Feature"
            )}
          </button>
        </div>
      </form>
    </div>
  );
}
