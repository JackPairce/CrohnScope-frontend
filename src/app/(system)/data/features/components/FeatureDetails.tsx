"use client";
// Generated by Copilot
import { ApiFeature } from "@/lib/api";
import { useState } from "react";
import SeverityUI from "./SeverityUI";

interface FeatureDetailsProps {
  feature: ApiFeature;
  onEdit: (feature: ApiFeature) => void;
  onDelete: (feature: ApiFeature) => void;
  onUpdateImage?: (feature: ApiFeature) => void;
  maxSeverity: {
    value: number;
    setter: (value: number) => void;
  };
}

export default function FeatureDetails({
  feature,
  onEdit,
  onDelete,
  onUpdateImage,
  maxSeverity,
}: FeatureDetailsProps) {
  const [imageLoading, setImageLoading] = useState(true);

  const handleImageLoad = () => {
    setImageLoading(false);
  };

  const renderImageContent = () => {
    if (feature.img) {
      return (
        <div
          className="relative group cursor-pointer"
          onClick={() => onUpdateImage?.(feature)}
        >
          <img
            src={`data:image/jpeg;base64,${feature.img}`}
            alt={feature.name}
            className={`w-full h-full object-contain transform group-hover:scale-105 transition-transform duration-200 ${
              imageLoading ? "opacity-0" : "opacity-100"
            }`}
            onLoad={handleImageLoad}
          />
          {imageLoading && (
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="animate-pulse flex space-x-2">
                <div className="w-2 h-2 bg-indigo-400 dark:bg-indigo-600 rounded-full"></div>
                <div className="w-2 h-2 bg-indigo-400 dark:bg-indigo-600 rounded-full animation-delay-150"></div>
                <div className="w-2 h-2 bg-indigo-400 dark:bg-indigo-600 rounded-full animation-delay-300"></div>
              </div>
            </div>
          )}
          <div className="absolute inset-0 opacity-0 group-hover:opacity-20 transition-opacity duration-200 flex items-center justify-center">
            <svg
              className="w-8 h-8 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
              />
            </svg>
          </div>
        </div>
      );
    } else {
      return (
        <button
          onClick={() => onUpdateImage?.(feature)}
          className="w-full h-full flex flex-col items-center justify-center p-8 text-gray-400 dark:text-gray-500 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors duration-200 group"
        >
          <div className="relative">
            <svg
              className="w-12 h-12 mb-2"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={1.5}
                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
              />
            </svg>
            <svg
              className="w-6 h-6 absolute -right-1 -bottom-1 text-indigo-500 dark:text-indigo-400 opacity-0 group-hover:opacity-100 transition-opacity duration-200"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 4v16m8-8H4"
              />
            </svg>
          </div>
          <span className="text-sm">Click to add image</span>
        </button>
      );
    }
  };

  return (
    <div
      className="rounded-lg shadow-md p-6 transition-all duration-200 hover:shadow-lg"
      style={{
        background: "var(--card-bg)",
        border: "1px solid var(--card-border)",
      }}
    >
      <div className="flex justify-between items-center mb-6">
        <div>
          <h2
            className="text-xl font-semibold"
            style={{ color: "var(--foreground)" }}
          >
            Feature Details
          </h2>
          <p className="text-sm mt-1" style={{ color: "var(--text-muted)" }}>
            ID: #{feature.id}
          </p>
        </div>
        <div className="flex space-x-2">
          <button
            onClick={() => onEdit(feature)}
            style={{
              background: "var(--button-primary)",
              color: "var(--card-bg)",
            }}
            className="inline-flex items-center px-4 py-2 rounded-md hover:brightness-90 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors duration-200"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4 mr-2"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
              />
            </svg>
            Edit
          </button>
          <button
            onClick={() => onDelete(feature)}
            style={{
              background: "#ef4444",
              color: "var(--card-bg)",
            }}
            className="inline-flex items-center px-4 py-2 rounded-md hover:brightness-90 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors duration-200"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4 mr-2"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
              />
            </svg>
            Delete
          </button>
        </div>
      </div>

      <div className="space-y-6">
        <div className="relative group">
          <div
            className="w-full aspect-video rounded-lg overflow-hidden"
            style={{ background: "var(--input-bg)" }}
          >
            {renderImageContent()}
          </div>
        </div>

        <div className="grid grid-cols-1 gap-6">
          {/* Feature Info Card */}
          <div
            className="rounded-lg p-6"
            style={{ background: "var(--card-border)" }}
          >
            <h3
              className="text-lg font-semibold mb-3"
              style={{ color: "var(--foreground)" }}
            >
              {feature.name}
            </h3>
            {feature.description && (
              <p
                className="text-sm leading-relaxed mb-4"
                style={{ color: "var(--text-muted)" }}
              >
                {feature.description}
              </p>
            )}

            {/* Severity Section */}
            <div
              className="pt-4 border-t"
              style={{ borderColor: "var(--card-border)" }}
            >
              <div className="flex items-center justify-between mb-3">
                <h4
                  className="text-sm font-medium"
                  style={{ color: "var(--foreground)" }}
                >
                  Severity Level
                </h4>
                <span
                  className="text-sm font-semibold"
                  style={{ color: "var(--accent)" }}
                >
                  {feature.severity ?? 0} / {maxSeverity.value}
                </span>
              </div>
              <SeverityUI
                current={feature.severity ?? 0}
                max={maxSeverity.value}
                className="w-full"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
