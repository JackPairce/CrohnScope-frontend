// Generated by Copilot
"use client";

import Image from "next/image";
import { useEffect, useState } from "react";
import { components } from "../../api";
import { useMonitoringData } from "./useMonitoringData";

type ConnectionStatusType = "connected" | "connecting" | "disconnected";
type SystemMetrics = components["schemas"]["SystemMetrics"];
type SystemResponse = components["schemas"]["SystemResponse"];

// RealTimeMetrics component for displaying real-time system information
function RealTimeMetrics({
  metrics,
  stale,
}: {
  metrics: SystemMetrics | null;
  stale: boolean;
}) {
  if (!metrics) return null;

  // Helper function to get status color
  const getStatusColor = (
    value: number,
    thresholds: { warning: number; critical: number }
  ) => {
    if (value >= thresholds.critical) return "text-red-400";
    if (value >= thresholds.warning) return "text-yellow-400";
    return "text-green-400";
  };

  // Helper function to format value with unit
  const formatValue = (value: string | number, unit: string) => {
    return `${value}${unit}`;
  };

  const cpuUsage = parseFloat(metrics.cpu.total_usage);
  const memoryUsage = parseFloat(metrics.memory.percentage);

  return (
    <div
      className={`bg-gray-900/50 border-b border-gray-800 transition-opacity duration-300 ${
        stale ? "opacity-50" : ""
      }`}
    >
      <div className="container mx-auto px-4 py-3">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {/* CPU Status Card */}
          <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700/50">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-medium text-gray-300">CPU Usage</h3>
              <span
                className={`text-sm font-bold ${getStatusColor(cpuUsage, {
                  warning: 70,
                  critical: 85,
                })}`}
              >
                {formatValue(metrics.cpu.total_usage, "")}
              </span>
            </div>
            <div className="w-full bg-gray-700/50 rounded-full h-1.5 mb-3">
              <div
                className={`h-1.5 rounded-full transition-all duration-500 ${getStatusColor(
                  cpuUsage,
                  { warning: 70, critical: 85 }
                ).replace("text-", "bg-")}`}
                style={{ width: `${cpuUsage}%` }}
              ></div>
            </div>
            <div className="grid grid-cols-2 gap-2 text-xs text-gray-400">
              <div>Cores: {metrics.cpu.physical_cores}</div>
              <div>Freq: {metrics.cpu.current_frequency}</div>
            </div>
          </div>

          {/* Memory Status Card */}
          <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700/50">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-medium text-gray-300">
                Memory Usage
              </h3>
              <span
                className={`text-sm font-bold ${getStatusColor(memoryUsage, {
                  warning: 80,
                  critical: 90,
                })}`}
              >
                {formatValue(metrics.memory.percentage, "")}
              </span>
            </div>
            <div className="w-full bg-gray-700/50 rounded-full h-1.5 mb-3">
              <div
                className={`h-1.5 rounded-full transition-all duration-500 ${getStatusColor(
                  memoryUsage,
                  { warning: 80, critical: 90 }
                ).replace("text-", "bg-")}`}
                style={{ width: `${memoryUsage}%` }}
              ></div>
            </div>
            <div className="grid grid-cols-2 gap-2 text-xs text-gray-400">
              <div>Used: {metrics.memory.used}</div>
              <div>Total: {metrics.memory.total}</div>
            </div>
          </div>

          {/* Temperature Status Card */}
          <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700/50">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-medium text-gray-300">
                CPU Temperature
              </h3>
              {metrics.cpu.temperatures &&
                Object.entries(metrics.cpu.temperatures)[0] && (
                  <span
                    className={`text-sm font-bold ${getStatusColor(
                      Object.entries(metrics.cpu.temperatures)[0][1],
                      { warning: 60, critical: 80 }
                    )}`}
                  >
                    {formatValue(
                      Object.entries(metrics.cpu.temperatures)[0][1],
                      "°C"
                    )}
                  </span>
                )}
            </div>
            <div className="grid grid-cols-2 gap-2 mt-2">
              {metrics.cpu.temperatures &&
                Object.entries(metrics.cpu.temperatures).map(([core, temp]) => (
                  <div key={core} className="flex items-center justify-between">
                    <span className="text-xs text-gray-400">{core}:</span>
                    <span
                      className={`text-xs ${getStatusColor(temp, {
                        warning: 60,
                        critical: 80,
                      })}`}
                    >
                      {formatValue(temp, "°C")}
                    </span>
                  </div>
                ))}
            </div>
          </div>

          {/* GPU Status Card */}
          {metrics.gpu ? (
            <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700/50">
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-sm font-medium text-gray-300">
                  GPU Status
                </h3>
                <span className="text-sm font-bold text-purple-400">
                  Active
                </span>
              </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-xs text-gray-400">Memory:</span>
                  <span className="text-xs text-purple-400">
                    {metrics.gpu.memory_allocated}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-xs text-gray-400">Device:</span>
                  <span className="text-xs text-gray-300">
                    {metrics.gpu.device_name}
                  </span>
                </div>
              </div>
            </div>
          ) : (
            <div className="bg-gray-800/50 rounded-lg p-4 border border-gray-700/50 flex items-center justify-center">
              <span className="text-sm text-gray-500">No GPU Available</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

function ConnectionStatus({
  status,
  timeAgo,
}: {
  status: ConnectionStatusType;
  timeAgo: string;
}) {
  const statusData = {
    connected: {
      color: "text-green-400",
      bg: "bg-green-400",
      text: "Connected",
    },
    connecting: {
      color: "text-yellow-400",
      bg: "bg-yellow-400",
      text: "Connecting...",
    },
    disconnected: {
      color: "text-red-400",
      bg: "bg-red-400",
      text: "Disconnected",
    },
  };

  const currentStatus = statusData[status];

  return (
    <div className="flex items-center space-x-2 text-sm">
      <div className={`w-2 h-2 rounded-full ${currentStatus.bg}`}></div>
      <span className={currentStatus.color}>{currentStatus.text}</span>
      {status === "connected" && (
        <span className="text-gray-500">• Updated {timeAgo}</span>
      )}
    </div>
  );
}

export default function DashboardPage() {
  const {
    aiStatus,
    imageStatus,
    systemInfo,
    dataUsage,
    metrics,
    connectionStatus,
    isLoading,
    error,
    lastUpdate,
  } = useMonitoringData();

  const [timeAgo, setTimeAgo] = useState("just now");
  const [isStale, setIsStale] = useState(false);

  // Update the "time ago" display and stale status
  useEffect(() => {
    function updateTimeAgo() {
      const now = new Date();
      const diff = now.getTime() - lastUpdate.getTime();

      // Mark data as stale if it's more than 5 seconds old
      setIsStale(diff > 5000);

      // Update time ago text
      if (diff < 5000) {
        setTimeAgo("just now");
      } else if (diff < 60000) {
        setTimeAgo(`${Math.round(diff / 1000)}s ago`);
      } else if (diff < 3600000) {
        setTimeAgo(`${Math.round(diff / 60000)}m ago`);
      } else {
        setTimeAgo(`${Math.round(diff / 3600000)}h ago`);
      }
    }

    const timer = setInterval(updateTimeAgo, 1000);
    return () => clearInterval(timer);
  }, [lastUpdate]);

  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center bg-gray-900">
        <div className="space-y-4 text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="text-gray-400">Loading dashboard data...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex h-screen items-center justify-center bg-gray-900">
        <div className="bg-gray-800 rounded-lg p-8 max-w-md mx-auto text-center border border-red-500/30">
          <div className="text-red-400 mb-4 text-xl">
            Error Loading Dashboard
          </div>
          <p className="text-gray-400">{error.message}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white flex flex-col">
      <RealTimeMetrics metrics={metrics} stale={isStale} />

      <div className="flex-1 container mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-8">
          <div className="flex items-center gap-3">
            <h1 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-400">
              CrohnScope Dashboard
            </h1>
            <div className="h-2 w-2 rounded-full bg-green-400 animate-pulse"></div>
          </div>
          <ConnectionStatus status={connectionStatus} timeAgo={timeAgo} />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {/* AI Status Card */}
          <div className="bg-gray-800/50 rounded-lg overflow-hidden border border-green-500/20 backdrop-blur-sm">
            <div className="p-5">
              <div className="flex items-center mb-6">
                <div className="bg-green-900/20 p-2.5 rounded-lg mr-3">
                  <Image
                    src="/svgs/model.svg"
                    alt="AI Model"
                    width={22}
                    height={22}
                    className="text-green-400"
                  />
                </div>
                <div>
                  <h3 className="text-lg font-bold text-white">
                    AI Model Status
                  </h3>
                  <p className="text-sm text-gray-400">Real-time monitoring</p>
                </div>
              </div>

              <div className="space-y-6">
                {/* Model Status */}
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-gray-400">Status</span>
                    <span
                      className={`text-sm font-medium ${
                        aiStatus?.isTraining
                          ? "text-yellow-400"
                          : "text-green-400"
                      }`}
                    >
                      {aiStatus?.isTraining ? "Training in Progress" : "Ready"}
                    </span>
                  </div>
                  {aiStatus?.isTraining && (
                    <div className="w-full bg-gray-700/50 rounded-full h-1">
                      <div className="bg-yellow-400/50 h-1 rounded-full animate-pulse"></div>
                    </div>
                  )}
                </div>

                {/* Accuracy */}
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-gray-400">
                      Model Accuracy
                    </span>
                    <span className="text-sm font-medium text-blue-400">
                      {aiStatus?.accuracy || 0}%
                    </span>
                  </div>
                  <div className="w-full bg-gray-700/50 rounded-full h-1.5">
                    <div
                      className="bg-blue-400 h-1.5 rounded-full transition-all duration-500"
                      style={{ width: `${aiStatus?.accuracy || 0}%` }}
                    ></div>
                  </div>
                </div>

                {/* Dataset Stats */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gray-700/30 rounded-lg p-3">
                    <div className="text-2xl font-bold text-green-400">
                      {imageStatus?.totalImages || 0}
                    </div>
                    <div className="text-xs text-gray-400">Total Images</div>
                  </div>
                  <div className="bg-gray-700/30 rounded-lg p-3">
                    <div className="text-2xl font-bold text-green-400">
                      {imageStatus?.segmentedCount || 0}
                    </div>
                    <div className="text-xs text-gray-400">Segmented</div>
                  </div>
                </div>
              </div>
            </div>
            <div className="px-5 py-3 border-t border-gray-700/30 bg-gray-800/50">
              <div className="flex items-center text-xs text-gray-400">
                <svg
                  className="w-4 h-4 mr-2 text-gray-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                Last trained: {aiStatus?.lastTrainingDate || "N/A"}
              </div>
            </div>
          </div>

          {/* System Resources Card */}
          <div className="bg-gray-800/50 rounded-lg overflow-hidden border border-blue-500/20 backdrop-blur-sm">
            <div className="p-5">
              <div className="flex items-center mb-6">
                <div className="bg-blue-900/20 p-2.5 rounded-lg mr-3">
                  <Image
                    src="/svgs/dataset.svg"
                    alt="System Resources"
                    width={22}
                    height={22}
                    className="text-blue-400"
                  />
                </div>
                <div>
                  <h3 className="text-lg font-bold text-white">
                    System Resources
                  </h3>
                  <p className="text-sm text-gray-400">
                    Storage and memory usage
                  </p>
                </div>
              </div>

              <div className="space-y-6">
                {/* Storage Usage */}
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-gray-400">Storage Usage</span>
                    <span className="text-sm font-medium text-blue-400">
                      {dataUsage?.percentage_used || "N/A"}
                    </span>
                  </div>
                  <div className="w-full bg-gray-700/50 rounded-full h-1.5 mb-1">
                    <div
                      className="bg-blue-400 h-1.5 rounded-full transition-all duration-500"
                      style={{
                        width: `${parseFloat(
                          dataUsage?.percentage_used?.replace("%", "") || "0"
                        )}%`,
                      }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-500">
                    {dataUsage?.total_usage || "0"} /{" "}
                    {dataUsage?.max_size || "0"}
                  </div>
                </div>

                {/* Resource Distribution */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gray-700/30 rounded-lg p-3">
                    <div className="text-sm font-medium text-gray-300 mb-2">
                      Dataset
                    </div>
                    <div className="space-y-2">
                      <div className="flex justify-between text-xs">
                        <span className="text-gray-400">Images:</span>
                        <span className="text-blue-400">
                          {dataUsage?.breakdown.dataset.images.count || 0}
                        </span>
                      </div>
                      <div className="flex justify-between text-xs">
                        <span className="text-gray-400">Masks:</span>
                        <span className="text-blue-400">
                          {dataUsage?.breakdown.dataset.masks.count || 0}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="bg-gray-700/30 rounded-lg p-3">
                    <div className="text-sm font-medium text-gray-300 mb-2">
                      Models
                    </div>
                    <div className="space-y-2">
                      <div className="flex justify-between text-xs">
                        <span className="text-gray-400">Files:</span>
                        <span className="text-blue-400">
                          {dataUsage?.breakdown.models.files.length || 0}
                        </span>
                      </div>
                      <div className="flex justify-between text-xs">
                        <span className="text-gray-400">Size:</span>
                        <span className="text-blue-400">
                          {dataUsage?.breakdown.models.size || "0"}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* System Status Card */}
          <div className="bg-gray-800/50 rounded-lg overflow-hidden border border-purple-500/20 backdrop-blur-sm">
            <div className="p-5">
              <div className="flex items-center mb-6">
                <div className="bg-purple-900/20 p-2.5 rounded-lg mr-3">
                  <Image
                    src="/svgs/chart.svg"
                    alt="System Status"
                    width={22}
                    height={22}
                    className="text-purple-400"
                  />
                </div>
                <div>
                  <h3 className="text-lg font-bold text-white">
                    System Status
                  </h3>
                  <p className="text-sm text-gray-400">Hardware and services</p>
                </div>
              </div>

              <div className="space-y-4">
                {/* System Info */}
                <div className="bg-gray-700/30 rounded-lg p-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <div className="text-xs text-gray-400 mb-1">System</div>
                      <div className="text-sm text-gray-300">
                        {systemInfo?.system.system || "N/A"}
                      </div>
                    </div>
                    <div>
                      <div className="text-xs text-gray-400 mb-1">Host</div>
                      <div className="text-sm text-gray-300">
                        {systemInfo?.system.node_name || "N/A"}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Service Status */}
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-400">Model API</span>
                    <span
                      className={`inline-flex items-center text-sm ${
                        aiStatus?.isOnline ? "text-green-400" : "text-red-400"
                      }`}
                    >
                      <span
                        className={`w-1.5 h-1.5 rounded-full mr-2 ${
                          aiStatus?.isOnline ? "bg-green-400" : "bg-red-400"
                        }`}
                      ></span>
                      {aiStatus?.isOnline ? "Online" : "Offline"}
                    </span>
                  </div>

                  {metrics?.gpu && (
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-400">GPU Support</span>
                      <span className="inline-flex items-center text-sm text-purple-400">
                        <span className="w-1.5 h-1.5 rounded-full mr-2 bg-purple-400"></span>
                        Active
                      </span>
                    </div>
                  )}

                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-400">
                      Training Service
                    </span>
                    <span
                      className={`inline-flex items-center text-sm ${
                        aiStatus?.isTraining
                          ? "text-yellow-400"
                          : "text-blue-400"
                      }`}
                    >
                      <span
                        className={`w-1.5 h-1.5 rounded-full mr-2 ${
                          aiStatus?.isTraining ? "bg-yellow-400" : "bg-blue-400"
                        }`}
                      ></span>
                      {aiStatus?.isTraining ? "Training" : "Ready"}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Status Footer */}
      <div className="border-t border-gray-800 bg-gray-900/50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex flex-col md:flex-row justify-between items-center gap-4 text-sm">
            <div className="flex items-center gap-4 text-gray-400">
              <span className="flex items-center gap-2">
                <svg
                  className="w-4 h-4 text-gray-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"
                  />
                </svg>
                {metrics?.cpu.physical_cores || 0} Cores @{" "}
                {metrics?.cpu.current_frequency || "N/A"}
              </span>
              <span className="flex items-center gap-2">
                <svg
                  className="w-4 h-4 text-gray-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                  />
                </svg>
                {systemInfo?.system.system || "N/A"}
              </span>
            </div>

            <div className="flex items-center gap-3">
              <div className="px-3 py-1 rounded-full bg-gray-800 text-xs text-gray-400 flex items-center gap-2">
                <span
                  className={`w-1.5 h-1.5 rounded-full ${
                    connectionStatus === "connected"
                      ? "bg-green-400"
                      : "bg-gray-500"
                  }`}
                ></span>
                v0.9.0
              </div>
              <a
                // TODO: Add link to GitHub repo
                href="https://github.com/JackPairce"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-400 hover:text-gray-300 transition-colors"
              >
                <svg
                  className="w-5 h-5"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M12 2C6.477 2 2 6.477 2 12c0 4.42 2.865 8.17 6.839 9.49.5.092.682-.217.682-.482 0-.237-.008-.866-.013-1.7-2.782.604-3.369-1.34-3.369-1.34-.454-1.156-1.11-1.464-1.11-1.464-.908-.62.069-.608.069-.608 1.003.07 1.531 1.03 1.531 1.03.892 1.529 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.025A9.578 9.578 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.025 2.747-1.025.546 1.377.203 2.394.1 2.647.64.699 1.028 1.592 1.028 2.683 0 3.842-2.339 4.687-4.566 4.935.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.579.688.481C19.138 20.168 22 16.418 22 12c0-5.523-4.477-10-10-10z"
                  />
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
